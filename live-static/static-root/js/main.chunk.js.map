{"version":3,"sources":["logo.svg","posts/PostInline.js","posts/Posts.js","posts/PostDetail.js","posts/PostForm.js","posts/PostCreate.js","scrape/ScrapeInline.js","posts/PostUpdate.js","scrape/ScrapeDetail.js","scrape/ScrapeForm.js","scrape/ScrapeCreate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PostInline","post","this","props","elClass","showContent","react_default","a","createElement","className","src","unsplash_url","class","alt","href","TARGET","Link","maintainScrollPosition","to","pathname","concat","slug","state","fromDashboard","title","draft","dist_default","fromNow","ago","timestamp","read_time","react_markdown_default","source","content","slice","trim","Component","Posts","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","togglePostListClass","bind","assertThisInitialized","handleNewPost","loadMorePosts","posts","postsPublic","postsListClass","previous","author","count","next","undefined","loadPosts","nextEndpoint","endpoint","thisComp","lookupOptions","method","headers","Content-Type","csrfToken","cookie","load","fetch","then","response","json","responseData","postsPublicList","results","filter","setState","staff","catch","error","console","log","postItemData","currentPosts","unshift","event","preventDefault","Button_default","variant","type","length","map","postItem","index","posts_PostInline","onClick","PostDetail","handlePostItemUpdated","doneLoading","owner","status","detail","match","params","loadPost","hrStyle","display","height","border","borderTop","margin","padding","color","id","username","style","EmailShareButton","url","buildUrl","EmailIcon","size","round","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","LinkedinShareButton","LinkedinIcon","RedditShareButton","RedditIcon","InstapaperShareButton","InstapaperIcon","PostForm","handleSubmit","handleInputChange","handleDraftChange","clearForm","postTitleRef","React","createRef","postContentRef","postUnsplashRef","publish","post_image","redirect","redirectLink","errors","data","_this2","X-CSRFToken","body","JSON","stringify","credentials","newPostItemCreated","alert","_this3","postItemUpdated","updatePost","createPost","key","target","name","value","defineProperty","postCreateForm","reset","defaultState","current","moment","Date","format","_this4","Redirect","onSubmit","ref","el","htmlFor","checked","onChange","required","placeholder","for","PostCreate","location","align-items","posts_PostForm","ScrapeInline","reviews","date","rating","review","ScrapeDetail","scrape","visible","words","loadMore","prev","scrapeItemData","loadReviews","business_name","csvDownload","buildFileName","Item","scrape_ScrapeInline","role","ScrapeForm","scrapeLinkRef","link","scraping","createScrape","clearFormRefs","scrapeCreateForm","react_loader_spinner_default","width","ScrapeCreate","scrape_ScrapeForm","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uSC4DzBC,mLArDF,IACEC,EAAQC,KAAKC,MAAbF,KACAG,EAAWF,KAAKC,MAAhBC,QACDC,EAA0B,SAAZD,EAAqB,UAAY,SACrD,OAEIE,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,GACZE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKT,EAAKU,aACVC,MAAM,eACNC,IAAK,UACVP,EAAAC,EAAAC,cAAA,SAAOI,MAAM,gBAAeN,EAAAC,EAAAC,cAAA,KACxBM,KAAK,kDACLC,OAAO,UAFiB,iBAG5BT,EAAAC,EAAAC,cAAA,MAAII,MAAM,SACNN,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,wBAAwB,EAAOC,GAAI,CACrCC,SAAQ,UAAAC,OAAYnB,EAAKoB,MACzBC,MAAO,CAACC,eAAe,KACvBtB,EAAKuB,QACO,IAAfvB,EAAKwB,MACNnB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,UAAwC,IAC5CH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SACII,MAAM,gBADV,eACqCN,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACjCoB,SAAO,EACPC,KAAG,GAAE3B,EAAK4B,WAHd,SASJvB,EAAAC,EAAAC,cAAA,wBACgBP,EAAK6B,UADrB,SAGAxB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAWJ,GACVC,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CACIyB,OAAQ/B,EAAKgC,QAAQC,MAAM,EAAG,KAAKC,OAAOf,OAAO,SAASd,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAC9DC,wBAAwB,EAAOC,GAAI,CACnCC,SAAQ,UAAAC,OAAYnB,EAAKoB,MACzBC,MAAO,CAACC,eAAe,KAEvBjB,EAAAC,EAAAC,cAAA,UAAQC,UAAS,mBAAjB,wBA5CC2B,8BCsKNC,cAlKf,SAAAA,EAAYlC,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAAmC,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzC,KAAMC,KACDyC,oBAAsBN,EAAKM,oBAAoBC,KAAzBN,OAAAO,EAAA,EAAAP,CAAAD,IAC3BA,EAAKS,cAAgBT,EAAKS,cAAcF,KAAnBN,OAAAO,EAAA,EAAAP,CAAAD,IACrBA,EAAKU,cAAgBV,EAAKU,cAAcH,KAAnBN,OAAAO,EAAA,EAAAP,CAAAD,IACrBA,EAAKhB,MAAQ,CACT2B,MAAO,GACPC,YAAa,GACbC,eAAgB,OAChBC,SAAU,KACVC,QAAQ,EACR5B,MAAO,KACP6B,MAAO,GAZIhB,+EAgBH,IACLiB,EAAQrD,KAAKoB,MAAbiC,KACM,OAATA,QAA0BC,IAATD,GACjBrD,KAAKuD,UAAUF,qCAKbG,GACN,IAAIC,EAAW,mBACMH,IAAjBE,IACAC,EAAWD,GAEf,IAAIE,EAAW1D,KACX2D,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,qBAGlBC,EAAYC,IAAOC,KAAK,kBACZX,IAAdS,IACAJ,EAAa,YAAkB,UAC/BA,EAAa,QAAY,eAAiBI,GAG9CG,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GAGd,IAAIC,EAAkBD,EAAaE,QAAQC,OAAO,SAAA1E,GAAI,OAAmB,IAAfA,EAAKwB,QAE/DmC,EAASgB,SAAS,CACd3B,MAAOW,EAAStC,MAAM2B,MAAM7B,OAAOoD,EAAaE,SAChDxB,YAAaU,EAAStC,MAAM4B,YAAY9B,OAAOqD,GAC/ClB,KAAMiB,EAAajB,KACnBH,SAAUoB,EAAapB,SACvByB,MAAOL,EAAaK,MACpBpD,MAAO+C,EAAa/C,MACpB6B,MAAOkB,EAAalB,UAG9BwB,MAAM,SAAUC,GACdC,QAAQC,IAAI,QAASF,yCAIjBP,GACR,IAAIvB,EAAQuB,EAAaG,OAAO,SAAA1E,GAAI,OAAmB,IAAfA,EAAKwB,QAC7CvB,KAAK0E,SAAS,CACV1B,YAAaD,0CAIPiC,GAEV,IAAIC,EAAejF,KAAKoB,MAAM2B,MAC9BkC,EAAaC,QAAQF,GACrBhF,KAAK0E,SAAS,CACV3B,MAAOkC,gDAKKE,GAChBA,EAAMC,iBAEmB,KADFpF,KAAKoB,MAAM6B,eAE9BjD,KAAK0E,SAAS,CACVzB,eAAgB,SAGpBjD,KAAK0E,SAAS,CACVzB,eAAgB,iDAOxBjD,KAAK0E,SAAS,CACV3B,MAAO,GACPE,eAAgB,OAChBI,KAAM,KACNH,SAAU,KAEVE,MAAO,IAEXpD,KAAKuD,6CAGA,IACER,EAAS/C,KAAKoB,MAAd2B,MACAC,EAAehD,KAAKoB,MAApB4B,YACAC,EAAkBjD,KAAKoB,MAAvB6B,eACA0B,EAAS3E,KAAKoB,MAAduD,MACAtB,EAAQrD,KAAKoB,MAAbiC,KACP,OACIjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,WACe,IAAVqE,EAAiBvE,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMP,UAAU,OACxBQ,wBAAwB,EACxBC,GAAI,CACAC,SAAQ,iBACRG,MAAO,CAACC,eAAe,KACxBjB,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CAAQiF,QAAQ,gBACRC,KAAK,UADb,oBAEH,GARd,KAYInF,EAAAC,EAAAC,cAAA,YACW,IAAVqE,EACGvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVwC,EAAMyC,OAAS,EAAIzC,EAAM0C,IAAI,SAACC,EAAUC,GACrC,OACIvF,EAAAC,EAAAC,cAACsF,EAAD,CAAY7F,KAAM2F,EACNxF,QAAS+C,MAExB7C,EAAAC,EAAAC,cAAA,4BAITF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVwC,EAAMyC,OAAS,EAAIxC,EAAYyC,IAAI,SAACC,EAAUC,GAC3C,OACIvF,EAAAC,EAAAC,cAACsF,EAAD,CAAY7F,KAAM2F,EACNxF,QAAS+C,MAExB7C,EAAAC,EAAAC,cAAA,4BAGbF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACD,OAAT8C,EAAgBjD,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CACbiF,QAAQ,gBACRO,QAAS7F,KAAK8C,eAFD,aAGG,IAExB1C,EAAAC,EAAAC,cAAA,mBA9JA4B,yHC0LL4D,cA1KX,SAAAA,EAAY7F,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAA8F,IACf1D,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAyD,GAAArD,KAAAzC,KAAMC,KACD8F,sBAAwB3D,EAAK2D,sBAAsBpD,KAA3BN,OAAAO,EAAA,EAAAP,CAAAD,IAC7BA,EAAKhB,MAAQ,CACTD,KAAM,KACNpB,KAAM,KACNiG,aAAa,EACbC,MAAO,MAPI7D,qFAWG4C,GAClBhF,KAAK0E,SAAS,CACV3E,KAAMiF,qCAIL7D,GACL,IAAMsC,EAAQ,cAAAvC,OAAiBC,EAAjB,KACVuC,EAAW1D,KACX2D,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,qBAIlBC,EAAYC,IAAOC,KAAK,kBACZX,IAAdS,IACAJ,EAAa,YAAkB,UAC/BA,EAAa,QAAY,eAAiBI,GAG9CG,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GAIZ,OAHwB,MAApBA,EAAS8B,QACTpB,QAAQC,IAAI,kBAETX,EAASC,SACjBF,KAAK,SAAUG,GACdA,EAAa6B,OACbzC,EAASgB,SAAS,CACdsB,aAAa,EACbjG,KAAM,OAGV2D,EAASgB,SAAS,CACdsB,aAAa,EACbjG,KAAMuE,EACN2B,MAAO3B,EAAa2B,UAG7BrB,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,iDAUzB,GAJA7E,KAAK0E,SAAS,CACVvD,KAAM,KACNpB,KAAM,OAENC,KAAKC,MAAMmG,MAAO,KACXjF,EAAQnB,KAAKC,MAAMmG,MAAMC,OAAzBlF,KACPnB,KAAK0E,SAAS,CACVvD,KAAMA,EACN6E,aAAa,IAEjBhG,KAAKsG,SAASnF,uCAIX,IACApB,EAAQC,KAAKoB,MAAbrB,KACP,iCAAAmB,OAC+BnB,EAAKoB,uCAG/B,IACE6E,EAAehG,KAAKoB,MAApB4E,YACAjG,EAAQC,KAAKoB,MAAbrB,KACAkG,EAASjG,KAAKoB,MAAd6E,MACPnB,QAAQC,IAAIhF,GAEZ,IAAMwG,EAAU,CACZC,QAAS,QACTC,OAAQ,MACRC,OAAQ,EACRC,UAAW,iBACXC,OAAQ,QACRC,QAAS,IACTC,MAAO,SAEX,OACI1G,EAAAC,EAAAC,cAAA,UAAqB,IAAhB0F,EAAwB5F,EAAAC,EAAAC,cAAA,OAAKI,MAAM,QAC1B,OAATX,EAAgB,YACbK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIyG,GAAG,OAAOhH,EAAKuB,OACnBlB,EAAAC,EAAAC,cAAA,MAAIyG,GAAG,OAAP,MAAiBhH,EAAKoD,OAAO6D,SAA7B,QACe,IAAVf,EACG7F,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMP,UAAU,OACVQ,wBAAwB,EACxBC,GAAI,CAACC,SAAQ,UAAAC,OAAYnB,EAAKoB,KAAjB,SACTC,MAAO,CAACrB,KAAMA,KACfK,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CAAQiF,QAAQ,gBACRC,KAAK,SAASwB,GAAG,eADzB,SAEC,GARlB,KASA3G,EAAAC,EAAAC,cAAA,MAAI2G,MAAOV,IACXnG,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SACIC,UAAU,eACVwG,GAAG,OAFP,eAEyB3G,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACrBoB,SAAO,EACPC,KAAG,GAAE3B,EAAK4B,WAJd,aAOJvB,EAAAC,EAAAC,cAAA,MAAI2G,MAAOV,IACXnG,EAAAC,EAAAC,cAAA,OAAKE,IAAKT,EAAKU,aACVC,MAAM,oBACNC,IAAI,UACTP,EAAAC,EAAAC,cAAA,MAAI2G,MAAOV,IACXnG,EAAAC,EAAAC,cAAA,SAAOyG,GAAG,uBACN3G,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAkBC,IAAKnH,KAAKoH,YACxBhH,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAWC,KAAM,GAAIC,OAAO,MAGpCnH,EAAAC,EAAAC,cAAA,SAAOyG,GAAG,uBACN3G,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CAAqBL,IAAKnH,KAAKoH,YAC3BhH,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAcH,KAAM,GAAIC,OAAO,MAGvCnH,EAAAC,EAAAC,cAAA,SAAOyG,GAAG,uBACN3G,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAoBP,IAAKnH,KAAKoH,YAC1BhH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CAAaL,KAAM,GAAIC,OAAO,MAGtCnH,EAAAC,EAAAC,cAAA,SAAOyG,GAAG,uBACN3G,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAqBT,IAAKnH,KAAKoH,YAC3BhH,EAAAC,EAAAC,cAACuH,EAAA,EAAD,CAAcP,KAAM,GAAIC,OAAO,MAGvCnH,EAAAC,EAAAC,cAAA,SAAOyG,GAAG,uBACN3G,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAmBX,IAAKnH,KAAKoH,YACzBhH,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAYT,KAAM,GAAIC,OAAO,MAGrCnH,EAAAC,EAAAC,cAAA,SAAOyG,GAAG,uBACN3G,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAuBb,IAAKnH,KAAKoH,YAC7BhH,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CAAgBX,KAAM,GAAIC,OAAO,MAGzCnH,EAAAC,EAAAC,cAAA,KAAGyG,GAAG,OACF3G,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CACIyB,OAAQ/B,EAAKgC,YAKzB3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,cAIP,qBAtKI4B,+CC2PVgG,cAxQX,SAAAA,EAAYjI,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAAkI,IACf9F,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAA6F,GAAAzF,KAAAzC,KAAMC,KACDkI,aAAe/F,EAAK+F,aAAaxF,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IACpBA,EAAKgG,kBAAoBhG,EAAKgG,kBAAkBzF,KAAvBN,OAAAO,EAAA,EAAAP,CAAAD,IACzBA,EAAKiG,kBAAoBjG,EAAKiG,kBAAkB1F,KAAvBN,OAAAO,EAAA,EAAAP,CAAAD,IACzBA,EAAKkG,UAAYlG,EAAKkG,UAAU3F,KAAfN,OAAAO,EAAA,EAAAP,CAAAD,IACjBA,EAAKmG,aAAeC,IAAMC,YAC1BrG,EAAKsG,eAAiBF,IAAMC,YAC5BrG,EAAKuG,gBAAkBH,IAAMC,YAC7BrG,EAAKhB,MAAQ,CACTG,OAAO,EACPD,MAAO,KACPS,QAAS,KACT6G,QAAS,KACTC,WAAY,KACZC,UAAU,EACVC,aAAc,KACdC,OAAQ,IAjBG5G,0EAqBR6G,GAAM,IAAAC,EAAAlJ,KAEP+D,EAAYC,IAAOC,KAAK,aAC1BP,EAAW1D,KACf,QAAkBsD,IAAdS,EAAyB,CACzB,IAAIJ,EAAgB,CAChBC,OAAQ,OACRC,QAAS,CACLC,eAAgB,mBAChBqF,cAAepF,GAEnBqF,KAAMC,KAAKC,UAAUL,GACrBM,YAAa,WAGjBrF,MAda,cAcGP,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GAClBZ,EAASgB,SAAS,CAACqE,aAAY,UAAA7H,OAAYoD,EAAanD,QACpDuC,EAASzD,MAAMuJ,oBACf9F,EAASzD,MAAMuJ,mBAAmBlF,GAEtCZ,EAAS4E,cACV1D,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,GACrB4E,MAAM,gDACPtF,KAAK,kBAAM+E,EAAKxE,SAAS,CAACoE,UAAU,0CAKpCG,GAAM,IAAAS,EAAA1J,KACND,EAAQC,KAAKC,MAAbF,KACD0D,EAAQ,cAAAvC,OAAiBnB,EAAKoB,KAAtB,KACR4C,EAAYC,IAAOC,KAAK,aAC1BP,EAAW1D,KACf,QAAkBsD,IAAdS,EAAyB,CACzB,IAAIJ,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,mBAChBqF,cAAepF,GAEnBqF,KAAMC,KAAKC,UAAUL,GACrBM,YAAa,WAGjBrF,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GAClBZ,EAASgB,SAAS,CAACqE,aAAY,UAAA7H,OAAYoD,EAAanD,QAEpDuC,EAASzD,MAAM0J,iBACfjG,EAASzD,MAAM0J,gBAAgBrF,KAGpCM,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,GACrB4E,MAAM,gDACPtF,KAAK,kBAAMuF,EAAKhF,SAAS,CAACoE,UAAU,4CAKlC3D,GACTA,EAAMC,iBACN,IAAI6D,EAAOjJ,KAAKoB,WAGHkC,IADEtD,KAAKC,MAAbF,KAEHC,KAAK4J,WAAWX,GAEhBjJ,KAAK6J,WAAWZ,6CAKN9D,GACdA,EAAMC,iBACN,IAAI0E,EAAM3E,EAAM4E,OAAOC,KACnBC,EAAQ9E,EAAM4E,OAAOE,MACb,UAARH,GACIG,EAAMzE,OAAS,KACfiE,MAAM,0BAGdzJ,KAAK0E,SAALrC,OAAA6H,EAAA,EAAA7H,CAAA,GACKyH,EAAMG,8CAIG9E,GACdnF,KAAK0E,SAAS,CACVnD,OAAQvB,KAAKoB,MAAMG,0CAIjB4D,GACFA,GACAA,EAAMC,iBAEVpF,KAAKmK,eAAeC,QACpBpK,KAAKqK,uDAKLrK,KAAKuI,aAAa+B,QAAU,GAC5BtK,KAAK0I,eAAe4B,QAAU,GAC9BtK,KAAK2I,gBAAgB2B,QAAU,0CAK/BtK,KAAK0E,SAAS,CACVnD,OAAO,EACPD,MAAO,KACPS,QAAS,KACT8G,WAAY,KACZD,QAAS2B,IAAO,IAAIC,MAAQC,OAAO,4DAIvB,IACT1K,EAAQC,KAAKC,MAAbF,UACMuD,IAATvD,EACAC,KAAK0E,SAAS,CACVnD,MAAOxB,EAAKwB,MACZD,MAAOvB,EAAKuB,MACZS,QAAShC,EAAKgC,QACd8G,WAAY9I,EAAK8I,WACjBD,QAAS2B,IAAOxK,EAAK6I,SAAS6B,OAAO,gBAGzCzK,KAAKqK,gDAKJ,IAAAK,EAAA1K,KACE4I,EAAW5I,KAAKoB,MAAhBwH,QACAtH,EAAStB,KAAKoB,MAAdE,MACAS,EAAW/B,KAAKoB,MAAhBW,QACA8G,EAAc7I,KAAKoB,MAAnByH,WACAC,EAAY9I,KAAKoB,MAAjB0H,SACAC,EAAgB/I,KAAKoB,MAArB2H,aACP,OAAID,EACO1I,EAAAC,EAAAC,cAACqK,EAAA,EAAD,CAAU3J,GAAI+H,IAGrB3I,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,QAAMsK,SAAU5K,KAAKmI,aACf0C,IAAK,SAACC,GAAD,OAAQJ,EAAKP,eAAiBW,IACrC1K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAawG,GAAG,gBAC3B3G,EAAAC,EAAAC,cAAA,SAAOyK,QAAQ,SACX3K,EAAAC,EAAAC,cAAA,SAAOiF,KAAK,WACLyF,QAAShL,KAAKoB,MAAMG,MACpBwF,GAAG,QACHiD,KAAK,QACLzJ,UAAU,OACV0K,SAAUjL,KAAKqI,qBAE1BjI,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CAAQiF,QAAQ,gBACRO,QAAS,SAACV,GACNA,EAAMC,iBACNsF,EAAKrC,sBAHjB,SAMAjI,EAAAC,EAAAC,cAAA,SAAOyK,QAAQ,WAAf,gBACA3K,EAAAC,EAAAC,cAAA,SACIiF,KAAK,OACLwB,GAAG,UACHiD,KAAK,UACLzJ,UAAU,eACV0K,SAAUjL,KAAKoI,kBACf6B,MAAOrB,EACPsC,SAAS,aACb9K,EAAAC,EAAAC,cAAA,UAAQiF,KAAK,SAAShF,UAAU,kBACxBwG,GAAG,iBADX,SAIJ3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SACIiF,KAAK,OACLwB,GAAG,QACHiD,KAAK,QACLC,MAAO3I,EACPf,UAAU,eACV4K,YAAY,kBACZN,IAAK7K,KAAKuI,aACV0C,SAAUjL,KAAKoI,kBACf8C,SAAS,cAEjB9K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAO8K,IAAI,cACPhL,EAAAC,EAAAC,cAAA,uCAA8BF,EAAAC,EAAAC,cAAA,KAC1BM,KAAK,uBACLmJ,OAAO,UAFmB,gBAA9B,cAE+C3J,EAAAC,EAAAC,cAAA,KAC3CM,KAAK,4BACLmJ,OAAO,UAFoC,SAF/C,2GASJ3J,EAAAC,EAAAC,cAAA,SACIiF,KAAK,OACLwB,GAAG,aACHiD,KAAK,aACLC,MAAOpB,EACPtI,UAAU,eACV4K,YAAY,aACZN,IAAK7K,KAAK2I,gBACVsC,SAAUjL,KAAKoI,kBACf8C,SAAS,cAEjB9K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEXH,EAAAC,EAAAC,cAAA,YACIyG,GAAG,UACH8D,IAAK7K,KAAK0I,eACVsB,KAAK,UACLC,MAAOlI,EACPxB,UAAU,eACV4K,YAAY,eACZF,SAAUjL,KAAKoI,kBACf8C,SAAS,cAGjB9K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAeyB,OAAQC,eA/P5BG,aCcRmJ,cAlBP,SAAAA,EAAYpL,GAAQ,OAAAoC,OAAAC,EAAA,EAAAD,CAAArC,KAAAqL,GAAAhJ,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAgJ,GAAA5I,KAAAzC,KACVC,0EAGL,IACEF,EAAQC,KAAKC,MAAMqL,SAASlK,MAA5BrB,KACP,OACIK,EAAAC,EAAAC,cAAA,OAAKI,MAAM,YAAY6K,cAAY,UACrB,OAATxL,EACGK,EAAAC,EAAAC,cAACkL,EAAD,CAAUzL,KAAMA,IACdK,EAAAC,EAAAC,cAACkL,EAAD,cAXGtJ,aCwBVuJ,GCvBUvJ,6LDAZ,IACEwJ,EAAW1L,KAAKC,MAAhByL,QAUP,OACItL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,SAAIoL,EAAQvI,QAApC,MACA/C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,SAAIoL,EAAQC,MAApC,MACAvL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,SAAIoL,EAAQE,SACpCxL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQmL,EAAQG,QAC7BzL,EAAAC,EAAAC,cAAA,MAAI2G,MAfI,CACZT,QAAS,QACTC,OAAQ,MACRC,OAAQ,EACRC,UAAW,iBACXC,OAAQ,QACRC,QAAS,IACTC,MAAO,mBAXQ5E,gCE+KZ4J,cAtKX,SAAAA,EAAY7L,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAA8L,IACf1J,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAyJ,GAAArJ,KAAAzC,KAAMC,KACDmB,MAAQ,CACTD,KAAM,KACN4K,OAAQ,KACR/F,aAAa,EACbgG,QAAS,GACTC,MAAO,MAEX7J,EAAK8J,SAAW9J,EAAK8J,SAASvJ,KAAdN,OAAAO,EAAA,EAAAP,CAAAD,IATDA,0EAafpC,KAAK0E,SAAS,SAACyH,GACX,MAAO,CAACH,QAASG,EAAKH,QAAU,oDAIlBI,GAClBpM,KAAK0E,SAAS,CACVqH,OAAQK,wCAIJjL,GACR,IAAMsC,EAAQ,eAAAvC,OAAkBC,EAAlB,KACVuC,EAAW1D,KACX2D,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,qBAIlBC,EAAYC,IAAOC,KAAK,kBACZX,IAAdS,IACAJ,EAAa,YAAkB,UAC/BA,EAAa,QAAY,eAAiBI,GAG9CG,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GAIZ,OAHwB,MAApBA,EAAS8B,QACTpB,QAAQC,IAAI,kBAETX,EAASC,SACjBF,KAAK,SAAUG,GACdA,EAAa6B,OACbzC,EAASgB,SAAS,CACdsB,aAAa,EACb+F,OAAQ,OAGZrI,EAASgB,SAAS,CACdsB,aAAa,EACb+F,OAAQzH,MAGjBM,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,iDAQzB,GAHA7E,KAAK0E,SAAS,CACVvD,KAAM,OAENnB,KAAKC,MAAMmG,MAAO,KACXjF,EAAQnB,KAAKC,MAAMmG,MAAMC,OAAzBlF,KACPnB,KAAK0E,SAAS,CACVvD,KAAMA,EACN6E,aAAa,IAEjBhG,KAAKqM,YAAYlL,uCAId,IACA4K,EAAU/L,KAAKoB,MAAf2K,OACP,0CAAA7K,OACwC6K,EAAO5K,8CAGnC,IACL4K,EAAU/L,KAAKoB,MAAf2K,OACP,SAAA7K,OACO6K,EAAOO,cADd,yCAiBK,IAAApD,EAAAlJ,KACEgG,EAAehG,KAAKoB,MAApB4E,YACA+F,EAAU/L,KAAKoB,MAAf2K,OAYP,OAEI3L,EAAAC,EAAAC,cAAA,UAAqB,IAAhB0F,EAAwB5F,EAAAC,EAAAC,cAAA,OAAKI,MAAM,QACxB,OAAXqL,EAAkB,6NAOf3L,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,wBAAwB,EAAOC,GAAI,CACrCC,SAAQ,UACRG,MAAO,CAACC,eAAe,KAGvBjB,EAAAC,EAAAC,cAAA,UAAQC,UAAS,mBAAjB,eAIJH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKyL,EAAOO,eACZlM,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CAAQiF,QAAQ,YACRO,QAAS,kBAAM0G,IAAYR,EAAOL,QAASxC,EAAKsD,mBADxD,iBAIApM,EAAAC,EAAAC,cAAA,MAAI2G,MAtCJ,CACZT,QAAS,QACTC,OAAQ,MACRC,OAAQ,EACRC,UAAW,iBACXC,OAAQ,QACRC,QAAS,IACTC,MAAO,WAgCMiF,EAAOL,QAAQlG,OAAS,EAAIuG,EAAOL,QAAQ1J,MAAM,EAAGhC,KAAKoB,MAAM4K,SAASvG,IAAI,SAACgH,EAAM9G,GAChF,OACIvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMuJ,IAAKnE,GACtBvF,EAAAC,EAAAC,cAACoM,EAAD,CAAchB,QAASe,OAE9BrM,EAAAC,EAAAC,cAAA,6BACJN,KAAKoB,MAAM4K,QAAUD,EAAOL,QAAQlG,QACrCpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CAAQwF,QAAS7F,KAAKkM,SACd5G,QAAQ,gBAAgBC,KAAK,SAC7BhF,UAAU,aAFlB,gBAOPH,EAAAC,EAAAC,cAAA,OAAKI,MAAM,iBAAiBiM,KAAK,UACtCvM,EAAAC,EAAAC,cAAA,QAAMI,MAAM,WAAZ,wDArER,OACIN,EAAAC,EAAAC,cAACqK,EAAA,EAAD,CAAU3J,GAFN,0BA5FWkB,+BCmJZ0K,cAtJX,SAAAA,EAAY3M,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAA4M,IACfxK,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAuK,GAAAnK,KAAAzC,KAAMC,KACDkI,aAAe/F,EAAK+F,aAAaxF,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IACpBA,EAAKgG,kBAAoBhG,EAAKgG,kBAAkBzF,KAAvBN,OAAAO,EAAA,EAAAP,CAAAD,IACzBA,EAAKkG,UAAYlG,EAAKkG,UAAU3F,KAAfN,OAAAO,EAAA,EAAAP,CAAAD,IACjBA,EAAKyK,cAAgBrE,IAAMC,YAC3BrG,EAAKhB,MAAQ,CACT0L,KAAM,KACNhE,UAAU,EACVC,aAAc,KACd5H,KAAM,KACN4L,SAAU,KACV/D,OAAQ,IAZG5G,4EAgBN6G,GAAM,IAAAC,EAAAlJ,KAET+D,EAAYC,IAAOC,KAAK,aAC1BP,EAAW1D,KACf,QAAkBsD,IAAdS,EAAyB,CACzB,IAAIJ,EAAgB,CAChBC,OAAQ,OACRC,QAAS,CACLC,eAAgB,mBAChBqF,cAAepF,GAEnBqF,KAAMC,KAAKC,UAAUL,GACrBM,YAAa,WAGjBrF,MAda,eAcGP,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GACdZ,EAASgB,SAAS,CAACqE,aAAY,mBAAA7H,OAAqBoD,EAAanD,MAAQ4L,SAAU,OAEvFrJ,EAAS4E,cACV1D,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,GACrB4E,MAAM,gDACPtF,KAAK,kBAAM+E,EAAKxE,SAAS,CAAEoE,UAAU,4CAanC3D,GACTA,EAAMC,iBACN,IAAI6D,EAAOjJ,KAAKoB,WAGDkC,IADEtD,KAAKC,MAAf8L,QAEP/L,KAAK0E,SAAS,CAACqI,UAAU,IACzB/M,KAAKgN,aAAa/D,IAGdjJ,KAAKiN,0DAKK9H,GACdA,EAAMC,iBACN,IAAI0E,EAAM3E,EAAM4E,OAAOC,KACnBC,EAAQ9E,EAAM4E,OAAOE,MACb,SAARH,GACIG,EAAMzE,OAAS,KACfiE,MAAM,yBAGdzJ,KAAK0E,SAALrC,OAAA6H,EAAA,EAAA7H,CAAA,GACKyH,EAAMG,sCAIL9E,GACFA,GACAA,EAAMC,iBAEVpF,KAAKkN,iBAAiB9C,QACtBpK,KAAKqK,uDAKLrK,KAAK6M,cAAcvC,QAAU,0CAK7BtK,KAAK0E,SAAS,CACVoI,KAAM,mDAIM,IACTf,EAAU/L,KAAKC,MAAf8L,YACQzI,IAAXyI,EACA/L,KAAK0E,SAAS,CACVoI,KAAMf,EAAOe,OAGjB9M,KAAKqK,gDAKJ,IAAAX,EAAA1J,KACE8M,EAAQ9M,KAAKoB,MAAb0L,KACChE,EAAa9I,KAAKoB,MAAlB0H,SACAC,EAAiB/I,KAAKoB,MAAtB2H,aAER,OADqB/I,KAAKoB,MAAlB2L,SAEG3M,EAAAC,EAAAC,cAAA,OAAKyG,GAAG,gBAAe3G,EAAAC,EAAAC,cAAC6M,EAAA9M,EAAD,CAAQkF,KAAK,OAAOuB,MAAM,UAAUL,OAAO,MAAM2G,MAAM,QAA9E,mBAEPtE,EACG1I,EAAAC,EAAAC,cAACqK,EAAA,EAAD,CAAU3J,GAAI+H,IAGjB3I,EAAAC,EAAAC,cAAA,QAAMsK,SAAU5K,KAAKmI,aAAc0C,IAAK,SAACC,GAAD,OAAQpB,EAAKwD,iBAAmBpC,IACpE1K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SACIiF,KAAK,OACLwB,GAAG,OACHiD,KAAK,OACLC,MAAO6C,EACPvM,UAAU,eACV4K,YAAY,YACZN,IAAK7K,KAAK6M,cACV5B,SAAUjL,KAAKoI,kBACf8C,SAAS,cAEjB9K,EAAAC,EAAAC,cAAA,UAAQiF,KAAK,SAAShF,UAAU,mBAAhC,UAbJ,OAeIH,EAAAC,EAAAC,cAAA,UAAQC,UAAS,oBACTsF,QAAS7F,KAAKsI,WADtB,iBA/ISpG,aC+BVmL,mLA/BP,OACIjN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACgN,EAAD,MACAlN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,qEAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOwG,GAAG,WAAvB,iBACI3G,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOwG,GAAG,WAAxB,uCAEA3G,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOwG,GAAG,WAAxB,kDAEH3G,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACVH,EAAAC,EAAAC,cAAA,sGAGHF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,yJArBE2B,aC2BZqL,oLAhBX,OACEnN,EAAAC,EAAAC,cAACkN,EAAA,EAAD,KACIpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,KACErN,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWxC,IAC7CjL,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWxC,IACjDjL,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAW1L,IACvC/B,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,UAAW/H,IAC5C1F,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWR,IACxCjN,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,wBAAwBC,UAAW/B,aAV/C5J,aCDE4L,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAAS5H,MACvB,2DCZN6H,IAASC,OAAO9N,EAAAC,EAAAC,cAAC6N,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrK,KAAK,SAAAsK,GACjCA,EAAaC","file":"static/js/main.71359e81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom'\nimport ReactMarkdown from 'react-markdown'\nimport Moment from 'react-moment';\n\nclass PostInline extends Component {\n\n    render() {\n        const {post} = this.props;\n        const {elClass} = this.props;\n        const showContent = elClass === 'card' ? 'd-block' : 'd-none';\n        return (\n\n            <div className={elClass}>\n                <div className=\"card-body\">\n                    <img src={post.unsplash_url}\n                         class=\"card-img-top\"\n                         alt={'sigil'}/>\n                    <small class=\"image_source\"><a\n                        href='https://unsplash.com/photos/{post.unsplash_url}'\n                        TARGET=\"_blank\">Image Source</a></small>\n                    <h1 class=\"title\">\n                        <Link maintainScrollPosition={false} to={{\n                            pathname: `/posts/${post.slug}`,\n                            state: {fromDashboard: false}\n                        }}>{post.title}</Link>\n                        {post.draft === true ?\n                        <small className=\"draft\"> Draft</small>:\"\"}</h1>\n                    <h4>\n                        <small\n                            class=\"publish_date\"> Published: <Moment\n                            fromNow\n                            ago>{post.timestamp}</Moment> ago\n                        </small>\n                    </h4>\n                    {/*<h4>*/}\n                    {/*    Author: {post.author.username}*/}\n                    {/*</h4>*/}\n                    <h4>\n                        Read time: {post.read_time} min:\n                    </h4>\n                    <hr/>\n                    <p className={showContent}>\n                        <ReactMarkdown\n                            source={post.content.slice(0, 200).trim().concat('...')}/><Link\n                        maintainScrollPosition={false} to={{\n                        pathname: `/posts/${post.slug}`,\n                        state: {fromDashboard: false}\n                    }}>\n                        <button className={`btn btn-primary`}>Read\n                            More\n                        </button>\n                    </Link>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostInline\n","import React, {Component} from 'react';\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport PostInline from './PostInline'\nimport Button from 'react-bootstrap/Button';\nimport {Link} from 'react-router-dom'\n\nclass Posts extends Component {\n\n    constructor(props) {\n        super(props);\n        this.togglePostListClass = this.togglePostListClass.bind(this);\n        this.handleNewPost = this.handleNewPost.bind(this);\n        this.loadMorePosts = this.loadMorePosts.bind(this);\n        this.state = {\n            posts: [],\n            postsPublic: [],\n            postsListClass: \"card\",\n            previous: null,\n            author: false,\n            draft: null,\n            count: 0\n        }\n    }\n\n    loadMorePosts() {\n        const {next} = this.state;\n        if (next !== null || next !== undefined) {\n            this.loadPosts(next)\n        }\n\n    }\n\n    loadPosts(nextEndpoint) {\n        let endpoint = '/api/posts/';\n        if (nextEndpoint !== undefined) {\n            endpoint = nextEndpoint\n        }\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                return response.json()\n            }).then(function (responseData) {\n                // let currentPosts = thisComp.state.posts;\n                // let allPosts = currentPosts.concat(responseData.results);\n                let postsPublicList = responseData.results.filter(post => post.draft === false);\n\n                thisComp.setState({\n                    posts: thisComp.state.posts.concat(responseData.results),\n                    postsPublic: thisComp.state.postsPublic.concat(postsPublicList),\n                    next: responseData.next,\n                    previous: responseData.previous,\n                    staff: responseData.staff,\n                    draft: responseData.draft,\n                    count: responseData.count\n                })\n            }\n        ).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n    handlePosts(responseData) {\n        let posts = responseData.filter(post => post.draft === false);\n        this.setState({\n            postsPublic: posts\n        })\n    }\n\n    handleNewPost(postItemData) {\n        // console.log(postItemData)\n        let currentPosts = this.state.posts;\n        currentPosts.unshift(postItemData); // unshift\n        this.setState({\n            posts: currentPosts\n        })\n    }\n\n\n    togglePostListClass(event) {\n        event.preventDefault();\n        let currentListClass = this.state.postsListClass;\n        if (currentListClass === \"\") {\n            this.setState({\n                postsListClass: \"card\",\n            })\n        } else {\n            this.setState({\n                postsListClass: \"\",\n            })\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            posts: [],\n            postsListClass: \"card\",\n            next: null,\n            previous: null,\n            // author: true,\n            count: 0\n        });\n        this.loadPosts()\n    }\n\n    render() {\n        const {posts} = this.state;\n        const {postsPublic} = this.state;\n        const {postsListClass} = this.state;\n        const {staff} = this.state;\n        const {next} = this.state;\n        return (\n            <div className=\"container-fluid\">\n                <h1>\n                    {staff === true ? <Link className='mr-2'\n                              maintainScrollPosition={false}\n                              to={{\n                                  pathname: `/posts/create/`,\n                                  state: {fromDashboard: false}\n                              }}><Button variant=\"outline-light\"\n                                         type=\"button\">Create New Post</Button>\n                    </Link> : \"\"} </h1>\n\n                    {/*<Button onClick={this.togglePostListClass}>List View</Button>*/}\n                    {/*</h1>*/}\n                    <br/>\n                    {staff === true ?\n                        <div className=\"card-columns\">\n                            {posts.length > 0 ? posts.map((postItem, index) => {\n                                return (\n                                    <PostInline post={postItem}\n                                                elClass={postsListClass}/>\n                                )\n                            }) : <p>No Posts Found</p>\n                            }\n                        </div>\n                        :\n                        <div className=\"card-columns\">\n                            {posts.length > 0 ? postsPublic.map((postItem, index) => {\n                                return (\n                                    <PostInline post={postItem}\n                                                elClass={postsListClass}/>\n                                )\n                            }) : <p>No Posts Found</p>\n                            }\n                        </div>}\n                    <div className=\"d-flex flex-column text-center\">\n                        {next !== null ? <Button\n                            variant=\"outline-light\"\n                            onClick={this.loadMorePosts}>Load\n                            more</Button> : ''}\n                    </div>\n                    <br/>\n            </div>\n    );\n    }\n    }\n\n    export default Posts;","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport Moment from \"react-moment\";\nimport ReactMarkdown from \"react-markdown\";\nimport {\n    FacebookIcon,\n    LinkedinIcon,\n    TwitterIcon,\n    RedditIcon,\n    InstapaperIcon,\n    EmailIcon,\n    FacebookShareButton,\n    LinkedinShareButton,\n    TwitterShareButton,\n    RedditShareButton,\n    InstapaperShareButton,\n    EmailShareButton\n} from 'react-share';\nimport {Link} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\n\nclass PostDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.handlePostItemUpdated = this.handlePostItemUpdated.bind(this);\n        this.state = {\n            slug: null,\n            post: null,\n            doneLoading: false,\n            owner: null\n        }\n    }\n\n    handlePostItemUpdated(postItemData) {\n        this.setState({\n            post: postItemData\n        })\n    }\n\n    loadPost(slug) {\n        const endpoint = `/api/posts/${slug}/`;\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                if (response.status === 404) {\n                    console.log('Page not found')\n                }\n                return response.json()\n            }).then(function (responseData) {\n            if (responseData.detail) {\n                thisComp.setState({\n                    doneLoading: true,\n                    post: null\n                })\n            } else {\n                thisComp.setState({\n                    doneLoading: true,\n                    post: responseData,\n                    owner: responseData.owner,\n                });\n            }\n        }).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            slug: null,\n            post: null\n        });\n        if (this.props.match) {\n            const {slug} = this.props.match.params;\n            this.setState({\n                slug: slug,\n                doneLoading: false\n            });\n            this.loadPost(slug)\n        }\n    }\n\n    buildUrl() {\n        const {post} = this.state;\n        return (\n            `https://vvayne.io/posts/${post.slug}`)\n    }\n\n    render() {\n        const {doneLoading} = this.state;\n        const {post} = this.state;\n        const {owner} = this.state;\n        console.log(post)\n\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n        return (\n            <p>{(doneLoading === true) ? <div class=\"Main\">\n                {post === null ? \"Not Found\" :\n                    <div className='row'>\n                        <div className='col-md-10'>\n                            <h1 id='alt'>{post.title}</h1>\n                            <h4 id='alt'>By {post.author.username}&nbsp;\n                                {owner === true ?\n                                    <Link className='mr-2'\n                                          maintainScrollPosition={false}\n                                          to={{pathname: `/posts/${post.slug}/edit`,\n                                              state: {post: post}\n                                          }}><Button variant=\"outline-light\"\n                                                     type=\"button\" id=\"edit-button\">Edit</Button>\n                                    </Link> : \"\"} </h4>\n                            <hr style={hrStyle}/>\n                            <h4>\n                                <small\n                                    className=\"publish_date\"\n                                    id='alt'> Published: <Moment\n                                    fromNow\n                                    ago>{post.timestamp}</Moment> ago&nbsp;\n                                </small>\n                            </h4>\n                            <hr style={hrStyle}/>\n                            <img src={post.unsplash_url}\n                                 class=\"rounded img-fluid\"\n                                 alt=\"sigil\"/>\n                            <hr style={hrStyle}/>\n                            <small id='shareIconsContainer'>\n                                <EmailShareButton url={this.buildUrl()}>\n                                    <EmailIcon size={32} round={true}/>\n                                </EmailShareButton>\n                            </small>\n                            <small id='shareIconsContainer'>\n                                <FacebookShareButton url={this.buildUrl()}>\n                                    <FacebookIcon size={32} round={true}/>\n                                </FacebookShareButton>\n                            </small>\n                            <small id='shareIconsContainer'>\n                                <TwitterShareButton url={this.buildUrl()}>\n                                    <TwitterIcon size={32} round={true}/>\n                                </TwitterShareButton>\n                            </small>\n                            <small id='shareIconsContainer'>\n                                <LinkedinShareButton url={this.buildUrl()}>\n                                    <LinkedinIcon size={32} round={true}/>\n                                </LinkedinShareButton>\n                            </small>\n                            <small id='shareIconsContainer'>\n                                <RedditShareButton url={this.buildUrl()}>\n                                    <RedditIcon size={32} round={true}/>\n                                </RedditShareButton>\n                            </small>\n                            <small id='shareIconsContainer'>\n                                <InstapaperShareButton url={this.buildUrl()}>\n                                    <InstapaperIcon size={32} round={true}/>\n                                </InstapaperShareButton>\n                            </small>\n                            <p id=\"alt\">\n                                <ReactMarkdown\n                                    source={post.content}/>\n                            </p>\n\n                        </div>\n\n                        <div className='col-md-2'>\n                            <br/>\n                        </div>\n                    </div>\n                }\n            </div> : \"Loading...\"}</p>\n        )\n    }\n}\n\nexport default PostDetail","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport moment from 'moment'\nimport ReactMarkdown from \"react-markdown\";\nimport {Redirect} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleDraftChange = this.handleDraftChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n        this.postTitleRef = React.createRef();\n        this.postContentRef = React.createRef();\n        this.postUnsplashRef = React.createRef();\n        this.state = {\n            draft: false,\n            title: null,\n            content: null,\n            publish: null,\n            post_image: null,\n            redirect: false,\n            redirectLink: null,\n            errors: {},\n        }\n    }\n\n    createPost(data) {\n        const endpoint = '/api/posts/';\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                thisComp.setState({redirectLink: `/posts/${responseData.slug}`});\n                if (thisComp.props.newPostItemCreated) {\n                    thisComp.props.newPostItemCreated(responseData)\n                }\n                thisComp.clearForm();\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occurred, please try again later.\")\n            }).then(() => this.setState({redirect: true}));\n        }\n\n    }\n\n    updatePost(data) {\n        const {post} = this.props;\n        const endpoint = `/api/posts/${post.slug}/`;\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"PUT\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                thisComp.setState({redirectLink: `/posts/${responseData.slug}`});\n                // console.log(responseData)\n                if (thisComp.props.postItemUpdated) {\n                    thisComp.props.postItemUpdated(responseData)\n                }\n\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occurred, please try again later.\")\n            }).then(() => this.setState({redirect: true}));\n        }\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let data = this.state;\n\n        const {post} = this.props;\n        if (post !== undefined) {\n            this.updatePost(data)\n        } else {\n            this.createPost(data)\n        }\n\n    }\n\n    handleInputChange(event) {\n        event.preventDefault();\n        let key = event.target.name;\n        let value = event.target.value;\n        if (key === 'title') {\n            if (value.length > 120) {\n                alert(\"This title is too long\")\n            }\n        }\n        this.setState({\n            [key]: value\n        })\n    }\n\n    handleDraftChange(event) {\n        this.setState({\n            draft: !this.state.draft\n        })\n    }\n\n    clearForm(event) {\n        if (event) {\n            event.preventDefault()\n        }\n        this.postCreateForm.reset();\n        this.defaultState()\n    }\n\n\n    clearFormRefs() {\n        this.postTitleRef.current = '';\n        this.postContentRef.current = '';\n        this.postUnsplashRef.current = ''\n    }\n\n\n    defaultState() {\n        this.setState({\n            draft: false,\n            title: null,\n            content: null,\n            post_image: null,\n            publish: moment(new Date()).format('YYYY-MM-DD'),\n        });\n    }\n\n    componentDidMount() {\n        const {post} = this.props;\n        if (post !== undefined) {\n            this.setState({\n                draft: post.draft,\n                title: post.title,\n                content: post.content,\n                post_image: post.post_image,\n                publish: moment(post.publish).format('YYYY-MM-DD'),\n            })\n        } else {\n            this.defaultState()\n        }\n        // this.postTitleRef.current.focus()\n    }\n\n    render() {\n        const {publish} = this.state;\n        const {title} = this.state;\n        const {content} = this.state;\n        const {post_image} = this.state;\n        const {redirect} = this.state;\n        const {redirectLink} = this.state;\n        if (redirect) {\n            return <Redirect to={redirectLink}/>;\n        }\n        return (\n            <div>\n                <h1>Create Post</h1>\n                <form onSubmit={this.handleSubmit}\n                      ref={(el) => this.postCreateForm = el}>\n                    <div className='form-group' id='top-row-form'>\n                        <label htmlFor='draft'>\n                            <input type='checkbox'\n                                   checked={this.state.draft}\n                                   id='draft'\n                                   name='draft'\n                                   className='mr-2'\n                                   onChange={this.handleDraftChange}/>\n                        </label>\n                        <Button variant=\"outline-light\"\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    this.handleDraftChange()\n                                }}>Draft\n                        </Button>\n                        <label htmlFor='publish'>Publish Date</label>\n                        <input\n                            type='date'\n                            id='publish'\n                            name='publish'\n                            className='form-control'\n                            onChange={this.handleInputChange}\n                            value={publish}\n                            required='required'/>\n                        <button type='submit' className='btn btn-primary'\n                                id='create-submit'>Save\n                        </button>\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            type='text'\n                            id='title'\n                            name='title'\n                            value={title}\n                            className='form-control'\n                            placeholder='Blog post title'\n                            ref={this.postTitleRef}\n                            onChange={this.handleInputChange}\n                            required='required'/>\n                    </div>\n                    <div className='form-group'>\n                        <label for='post_image'>\n                            <small>Get your photo ID from <a\n                                href=\"https://unsplash.com\"\n                                target=\"_blank\">Unsplash.com</a>. Use this <a\n                                href=\"http://quick.as/x3vycpgog\"\n                                target=\"_blank\">guide</a> if you need help. Or,\n                                if you want a random image, enter \"random\" to\n                                pull random images from unsplash.\n                            </small>\n                        </label>\n                        <input\n                            type='text'\n                            id='post_image'\n                            name='post_image'\n                            value={post_image}\n                            className='form-control'\n                            placeholder='post_image'\n                            ref={this.postUnsplashRef}\n                            onChange={this.handleInputChange}\n                            required='required'/>\n                    </div>\n                    <div className='form-group'>\n                        {/*<label for='content'>Content</label>*/}\n                        <textarea\n                            id='content'\n                            ref={this.postContentRef}\n                            name='content'\n                            value={content}\n                            className='form-control'\n                            placeholder='Post content'\n                            onChange={this.handleInputChange}\n                            required='required'/>\n\n                    </div>\n                    <div className=\"preview\">\n                        <div className=\"preview-text\">\n                            <ReactMarkdown source={content}/>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default PostForm","import React, {Component} from 'react'\nimport PostForm from './PostForm'\n\nclass PostCreate extends Component {\n        constructor(props) {\n            super(props);\n        }\n\n    render() {\n        const {post} = this.props.location.state;\n        return (\n            <div class=\"col-md-10\" align-items=\"center\">\n                {post !== null ?\n                    <PostForm post={post}/>\n                    : <PostForm />\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default PostCreate\n\n// left for reference\n\n\n// import React, {Component} from 'react'\n// import 'whatwg-fetch'\n// import cookie from 'react-cookies'\n// import moment from 'moment'\n\n// class PostCreate extends Component {\n//     constructor(props){\n//         super(props)\n//         this.handleSubmit = this.handleSubmit.bind(this)\n//         this.handleInputChange = this.handleInputChange.bind(this)\n//         this.handleDraftChange = this.handleDraftChange.bind(this)\n//         this.clearForm = this.clearForm.bind(this)\n//         this.postTitleRef = React.createRef()\n//         this.postContentRef = React.createRef()\n//         this.state = {\n//             draft: false,\n//             title: null,\n//             content: null,\n//             publish: null,\n//             errors: {}\n//         }\n//     }\n//     createPost(data){\n//       const endpoint = '/api/posts/' \n//       const csrfToken = cookie.load('csrftoken')\n//       let thisComp = this\n//       if (csrfToken !== undefined) {\n//           let lookupOptions = {\n//               method: \"POST\",\n//               headers: {\n//                   'Content-Type': 'application/json',\n//                   'X-CSRFToken': csrfToken\n//               },\n//               body: JSON.stringify(data),\n//               credentials: 'include'\n//           }\n\n//           fetch(endpoint, lookupOptions)\n//           .then(function(response){\n//               return response.json()\n//           }).then(function(responseData){\n//               console.log(responseData)\n//               if (thisComp.props.newPostItemCreated){\n//                   thisComp.props.newPostItemCreated(responseData)\n//               }\n//               thisComp.clearForm()\n//           }).catch(function(error){\n//               console.log(\"error\", error)\n//               alert(\"An error occured, please try again later.\")\n//           })\n//       } \n\n//   }\n\n//     handleSubmit(event){\n//         event.preventDefault()\n//         let data = this.state\n//         this.createPost(data)\n//     }\n\n//     handleInputChange(event){\n//         event.preventDefault()\n//         let key = event.target.name\n//         let value = event.target.value\n//         if (key === 'title'){\n//             if (value.length > 120){\n//                 alert(\"This title is too long\")\n//             }\n//         }\n//         this.setState({\n//             [key]: value\n//         })\n//     }\n\n//     handleDraftChange(event){\n//       this.setState({\n//         draft: !this.state.draft\n//       })\n//     }\n\n//     clearForm(event){\n//       if (event){\n//         event.preventDefault()\n//       }\n//       this.postCreateForm.reset()\n//     }\n\n\n//     clearFormRefs(){\n//       this.postTitleRef.current=''\n//       this.postContentRef.current=''\n//     }\n\n\n//     componentDidMount(){\n//         this.setState({\n//             draft: false,\n//             title: null,\n//             content: null,\n//             publish: moment(new Date()).format('YYYY-MM-DD'),\n//         })\n//         this.postTitleRef.current.focus()\n//     }\n\n//     render(){\n//         const {publish} = this.state\n//         let thisComp = this\n//         return (\n//             <form onSubmit={this.handleSubmit} ref={(el) => this.postCreateForm = el}>\n//                 <div className='form-group'>\n//                     <label for='title'>Post title</label>\n//                     <input \n//                       type='text' \n//                       id='title' \n//                       name='title' \n//                       className='form-control'\n//                       placeholder='Blog post title' \n//                       ref = {this.postTitleRef}\n//                       onChange={this.handleInputChange} \n//                       required='required'/>\n//                 </div>\n//                  <div className='form-group'>\n//                     <label for='content'>Content</label>\n//                     <textarea id='content' ref = {this.postContentRef} name='content' className='form-control' placeholder='Post content' onChange={this.handleInputChange} required='required'/>\n\n//                 </div>\n//                 <div className='form-group'>\n//                     <label for='draft'>\n//                     <input type='checkbox' checked={this.state.draft} id='draft' name='draft' className='mr-2' onChange={this.handleDraftChange}/>\n//                      Draft </label>\n//                      <button onClick={(event)=>{event.preventDefault();this.handleDraftChange()}}>Toggle Draft</button>\n//                 </div>\n//                 <div className='form-group'>\n//                     <label for='publish'>Publish Date</label>\n//                     <input \n//                     type='date' \n//                     id='publish' \n//                     name='publish' \n//                     className='form-control' \n//                     onChange={this.handleInputChange}\n//                      value={publish}\n//                      required='required'/>\n//                 </div>\n//                 <button type='submit' className='btn btn-primary'>Save</button>\n//                 <button className='btn btn-secondary' onClick={this.clearForm}>Cancel</button>\n//             </form>\n//         )\n//     }\n\n// }\n\n// export default PostCreate","import React, {Component} from 'react';\n\nclass ScrapeInline extends Component {\n\n    render() {\n        const {reviews} = this.props;\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n        return (\n            <div className=\"col-lg-12\">\n                <td className=\"dash h5\"><b>{reviews.author}</b> |</td>\n                <td className=\"dash h5\"><b>{reviews.date}</b> |</td>\n                <td className=\"dash h5\"><b>{reviews.rating}</b></td>\n                <p className=\"dash\">{reviews.review}</p>\n                <hr style={hrStyle}/>\n            </div>\n        );\n    }\n}\n\nexport default ScrapeInline","import React, {Component} from 'react'\n\nimport PostForm from './PostForm'\n\nclass PostUpdate extends Component {\n  render(){\n    return (\n      <div class=\"col-md-10\" align-items=\"center\">\n        <PostForm />\n      </div>\n    )\n  }\n\n}\n\nexport default PostUpdate\n\n","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Link} from 'react-router-dom'\nimport ScrapeInline from \"../scrape/ScrapeInline\";\nimport {Redirect} from \"react-router-dom\";\nimport csvDownload from 'json-to-csv-export'\nimport Button from 'react-bootstrap/Button';\n\n\nclass ScrapeDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            slug: null,\n            scrape: null,\n            doneLoading: false,\n            visible: 25,\n            words: null,\n        };\n        this.loadMore = this.loadMore.bind(this);\n    }\n\n    loadMore() {\n        this.setState((prev) => {\n            return {visible: prev.visible + 25};\n        });\n    }\n\n    handlePostItemUpdated(scrapeItemData) {\n        this.setState({\n            scrape: scrapeItemData\n        })\n    }\n\n    loadReviews(slug) {\n        const endpoint = `/api/scrape/${slug}/`;\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                if (response.status === 404) {\n                    console.log('Page not found')\n                }\n                return response.json()\n            }).then(function (responseData) {\n            if (responseData.detail) {\n                thisComp.setState({\n                    doneLoading: true,\n                    scrape: null\n                })\n            } else {\n                thisComp.setState({\n                    doneLoading: true,\n                    scrape: responseData\n                })\n            }\n        }).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n    componentDidMount() {\n        this.setState({\n            slug: null\n        });\n        if (this.props.match) {\n            const {slug} = this.props.match.params;\n            this.setState({\n                slug: slug,\n                doneLoading: false\n            });\n            this.loadReviews(slug);\n        }\n    }\n\n    buildUrl() {\n        const {scrape} = this.state;\n        return (\n            `https://vvayne.io/scrape/results/${scrape.slug}`)\n    }\n\n    buildFileName() {\n        const {scrape} = this.state;\n        return (\n            `${scrape.business_name}.csv`\n        )\n    }\n\n    static routeChange() {\n        let path = `/scrape/create`;\n        return (\n            <Redirect to={path}/>\n        )\n    }\n\n    // runTextAnalysis() {\n    //     const {scrape} = this.state;\n    // }\n\n\n    render() {\n        const {doneLoading} = this.state;\n        const {scrape} = this.state;\n        // console.log(scrape);\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n\n        return (\n\n            <p>{(doneLoading === true) ? <div class=\"Main\">\n                {scrape === null ? \"No Reviews Found...In order to use this\\n\" +\n                    \"scraper you must be a registered user and\\n\" +\n                    \"logged in. If you are logged in and receiving\\n\" +\n                    \"this error, please confirm that the business\\n\" +\n                    \"you are attempting to scrape has reviews.\" :\n\n\n                    <div className=\"container-fluid\">\n                        <Link maintainScrollPosition={false} to={{\n                            pathname: `/scrape`,\n                            state: {fromDashboard: false}\n\n                        }}>\n                            <button className={`btn btn-primary`}>New\n                                Scrape\n                            </button>\n                        </Link>\n                        <br/>\n                        {/*<ScrapeChart words={scrape.analytics}/>*/}\n                        <br/>\n                        <h1>{scrape.business_name}</h1>\n                        <Button variant=\"secondary\"\n                                onClick={() => csvDownload(scrape.reviews, this.buildFileName())}>\n                            Download Data\n                        </Button>\n                        <hr style={hrStyle}/>\n                        {scrape.reviews.length > 0 ? scrape.reviews.slice(0, this.state.visible).map((Item, index) => {\n                            return (\n                                <div className=\"row\" key={index}>\n                                    <ScrapeInline reviews={Item}/>\n                                </div>)\n                        }) : <p>No Reviews Found</p>}\n                        {this.state.visible < scrape.reviews.length &&\n                        <div className=\"d-flex flex-column text-center\">\n                            <Button onClick={this.loadMore}\n                                    variant=\"outline-light\" type=\"button\"\n                                    className=\"load-more\">Load more</Button>\n                        </div>\n                        }\n                    </div>\n                }\n            </div> : <div class=\"spinner-border\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span></div>}</p>\n        )\n    }\n}\n\nexport default ScrapeDetail","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Redirect} from \"react-router-dom\";\nimport Loader from 'react-loader-spinner';\n\nclass ScrapeForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n        this.scrapeLinkRef = React.createRef();\n        this.state = {\n            link: null,\n            redirect: false,\n            redirectLink: null,\n            slug: null,\n            scraping: null,\n            errors: {}\n        }\n    }\n\n    createScrape(data) {\n        const endpoint = '/api/scrape/';\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                    thisComp.setState({redirectLink: `/scrape/results/${responseData.slug}`, scraping: null});\n                    // console.log(`scrape/results/${responseData.slug}`);\n                thisComp.clearForm()\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occurred, please try again later.\")\n            }).then(() => this.setState({ redirect: true }));\n        }\n\n    }\n\n    // buildRedirect() {\n    //     const {slug} = this.state;\n    //     const {link} = `scrape/results/${slug}`;\n    //     console.log(link);\n    //     return (\n    //         link.toString)\n    // }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let data = this.state;\n\n        const {scrape} = this.props;\n        if (scrape === undefined) {\n        this.setState({scraping: true});\n        this.createScrape(data)\n        }\n        else {\n            this.clearFormRefs();\n        }\n\n    }\n\n    handleInputChange(event) {\n        event.preventDefault();\n        let key = event.target.name;\n        let value = event.target.value;\n        if (key === 'link') {\n            if (value.length > 120) {\n                alert(\"This link is too long\")\n            }\n        }\n        this.setState({\n            [key]: value\n        });\n    }\n\n    clearForm(event) {\n        if (event) {\n            event.preventDefault()\n        }\n        this.scrapeCreateForm.reset();\n        this.defaultState();\n    }\n\n\n    clearFormRefs() {\n        this.scrapeLinkRef.current = '';\n    }\n\n\n    defaultState() {\n        this.setState({\n            link: null,\n        })\n    }\n\n    componentDidMount() {\n        const {scrape} = this.props;\n        if (scrape !== undefined) {\n            this.setState({\n                link: scrape.link,\n            })\n        } else {\n            this.defaultState()\n        }\n        // this.postTitleRef.current.focus()\n    }\n\n    render() {\n        const {link} = this.state;\n        const { redirect } = this.state;\n        const { redirectLink } = this.state;\n        const { scraping } = this.state;\n        if (scraping) {\n            return <div id=\"react-loader\"><Loader type=\"Puff\" color=\"#00BFFF\" height=\"200\" width=\"200\" /> ......scraping</div>\n        }\n        if (redirect) {\n        return <Redirect to={redirectLink}/>;\n        }\n        return (\n            <form onSubmit={this.handleSubmit} ref={(el) => this.scrapeCreateForm = el}>\n                <div className='form-group'>\n                    <input\n                        type='text'\n                        id='link'\n                        name='link'\n                        value={link}\n                        className='form-control'\n                        placeholder='Yelp Link'\n                        ref={this.scrapeLinkRef}\n                        onChange={this.handleInputChange}\n                        required='required'/>\n                </div>\n                <button type='submit' className='btn btn-primary'>Scrape</button>\n                 &nbsp;\n                <button className={`btn btn-secondary`}\n                        onClick={this.clearForm}>Clear</button>\n            </form>\n        )\n    }\n\n}\n\nexport default ScrapeForm","import React, {Component} from 'react'\n\nimport ScrapeForm from './ScrapeForm'\n\nclass ScrapeCreate extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Scrape Yelp</h1>\n                <ScrapeForm/>\n                <br/>\n                <div className=\"jumbotron jumbotron-fluid\">\n                    <div className=\"container\">\n                        <h1 className=\"display-4\">Yelp Scraper Demo</h1>\n                        <p className=\"lead\">This is a demo of a simple scraper\n                            I built to fetch yelp reviews.</p>\n                        <p className=\"lead\" id=\"enhance\">Instructions:</p>\n                            <ul className=\"lead\" id=\"enhance\">1. Find a business’s yelp page</ul>\n\n                            <ul className=\"lead\" id=\"enhance\">2. Copy the url and paste it into the text\n                                box</ul>\n                         <p className=\"lead\">\n                            <i>Note: This demo currently only scrapes up to three\n                                pages, to minimize database storage. </i>\n                         </p>\n                         <p className=\"lead\">\n                            A fully developed standalone web app is currently\n                            under development and will allow for the retrieval\n                            and temporary storage of all reviews. </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ScrapeCreate","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch} from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Posts from './posts/Posts';\nimport PostDetail from './posts/PostDetail';\nimport PostCreate from './posts/PostCreate';\nimport PostUpdate from './posts/PostUpdate';\n\nimport ScrapeDetail from './scrape/ScrapeDetail';\nimport ScrapeCreate from './scrape/ScrapeCreate'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n          <Switch>\n            <Route exact path='/posts/create' component={PostCreate}/>\n            <Route exact path='/posts/:slug/edit' component={PostCreate}/>\n            <Route exact path='/posts/' component={Posts}/>\n            <Route exact path='/posts/:slug' component={PostDetail}/>\n            <Route exact path='/scrape/' component={ScrapeCreate}/>\n            <Route exact path='/scrape/results/:slug' component={ScrapeDetail}/>\n            {/*<Route component={Posts}/>*/}\n          </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}