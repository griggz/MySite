{"version":3,"sources":["posts/PostInline.js","posts/Posts.js","posts/PostForm.js","posts/PostDetail.js","posts/PostCreate.js","scrape/ScrapeForm.js","scrape/ScrapeDetail.js","scrape/ScrapeCreate.js","App.js","serviceWorker.js","index.js","posts/twitter.png","posts/linkin.png","posts/reddit.svg","posts/facebook.svg","logo.svg"],"names":["PostInline","post","this","props","elClass","showContent","react_default","a","createElement","className","src","unsplash_url","class","alt","href","TARGET","Link","maintainScrollPosition","to","pathname","concat","slug","state","fromDashboard","title","dist_default","fromNow","ago","timestamp","read_time","react_markdown_default","source","content","slice","trim","Component","Posts","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","togglePostListClass","bind","assertThisInitialized","handleNewPost","loadMorePosts","posts","postsListClass","next","previous","author","count","undefined","loadPosts","nextEndpoint","endpoint","thisComp","lookupOptions","method","headers","Content-Type","csrfToken","cookie","load","fetch","then","response","json","responseData","console","log","setState","results","catch","error","postItemData","currentPosts","unshift","event","preventDefault","length","map","postItem","index","posts_PostInline","Button_default","onClick","PostForm","handleSubmit","handleInputChange","handleDraftChange","clearForm","postTitleRef","React","createRef","postContentRef","draft","publish","errors","data","X-CSRFToken","body","JSON","stringify","credentials","newPostItemCreated","alert","postItemUpdated","updatePost","createPost","key","target","name","value","defineProperty","postCreateForm","reset","defaultState","current","moment","Date","format","_this2","onSubmit","ref","el","for","type","id","placeholder","onChange","required","checked","PostDetail","handlePostItemUpdated","doneLoading","status","detail","match","params","loadPost","hrStyle","display","height","border","borderTop","margin","padding","color","username","style","buildUrl","fbookLogo","twitLogo","linkdLogo","redditLogo","PostCreate","posts_PostForm","ScrapeForm","scrapeLinkRef","link","newScrapeItemCreated","scrape","createScrape","clearFormRefs","scrapeCreateForm","ScrapeDetail","scrapeItemData","date","rating","review","ScrapeCreate","scrape_ScrapeForm","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.91bb2fa4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom'\nimport ReactMarkdown from 'react-markdown'\nimport Moment from 'react-moment';\n\nclass PostInline extends Component {\n\n    render() {\n        const {post} = this.props;\n        const {elClass} = this.props;\n        const showContent = elClass === 'card' ? 'd-block' : 'd-none';\n        return (\n\n            <div className={elClass}>\n                <div className=\"card-body\">\n                    <img src={post.unsplash_url}\n                         class=\"card-img-top\"\n                         alt={'sigil'}/>\n                    <small class=\"image_source\"><a\n                        href='https://unsplash.com/photos/{post.unsplash_url}'\n                        TARGET=\"_blank\">Image Source</a></small>\n                    <h1 class=\"title\">\n                        <Link maintainScrollPosition={false} to={{\n                            pathname: `/posts/${post.slug}`,\n                            state: {fromDashboard: false}\n                        }}>{post.title}</Link></h1>\n                    <h4>\n                        <small\n                            class=\"publish_date\"> Published: <Moment\n                            fromNow\n                            ago>{post.timestamp}</Moment> ago\n                        </small>\n                    </h4>\n                    {/*<h4>*/}\n                    {/*    Author: {post.author.username}*/}\n                    {/*</h4>*/}\n                    <h4>\n                        Read time: {post.read_time} min:\n                    </h4>\n                    <hr/>\n                    <p className={showContent}>\n                        <ReactMarkdown\n                            source={post.content.slice(0,200).trim().concat('...' )} /><Link maintainScrollPosition={false} to={{\n                            pathname: `/posts/${post.slug}`,\n                            state: {fromDashboard: false}\n                        }}>Read More</Link>\n                    </p>\n                </div>\n            </div>\n                );\n                }\n                }\n\n                export default PostInline\n","import React, {Component} from 'react';\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Link} from 'react-router-dom'\nimport PostInline from './PostInline'\nimport Button from 'react-bootstrap/Button';\n\nclass Posts extends Component {\n\n    constructor(props) {\n        super(props);\n        this.togglePostListClass = this.togglePostListClass.bind(this);\n        this.handleNewPost = this.handleNewPost.bind(this);\n        this.loadMorePosts = this.loadMorePosts.bind(this);\n        this.state = {\n            posts: [],\n            postsListClass: \"card\",\n            next: null,\n            previous: null,\n            author: false,\n            count: 0\n        }\n    }\n\n    loadMorePosts() {\n        const {next} = this.state;\n        if (next !== null || next !== undefined) {\n            this.loadPosts(next)\n        }\n\n    }\n\n    loadPosts(nextEndpoint) {\n        let endpoint = '/api/posts/';\n        if (nextEndpoint !== undefined) {\n            endpoint = nextEndpoint\n        }\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                return response.json()\n            }).then(function (responseData) {\n            console.log(responseData);\n            let currentPosts = thisComp.state.posts;\n            // let newPosts = currentPosts.concat(responseData.results)\n            // console.log(currentPosts)\n            thisComp.setState({\n                posts: thisComp.state.posts.concat(responseData.results),\n                next: responseData.next,\n                previous: responseData.previous,\n                author: responseData.author,\n                count: responseData.count\n            })\n        }).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n    handleNewPost(postItemData) {\n        // console.log(postItemData)\n        let currentPosts = this.state.posts;\n        currentPosts.unshift(postItemData); // unshift\n        this.setState({\n            posts: currentPosts\n        })\n    }\n\n\n    togglePostListClass(event) {\n        event.preventDefault();\n        let currentListClass = this.state.postsListClass;\n        if (currentListClass === \"\") {\n            this.setState({\n                postsListClass: \"card\",\n            })\n        } else {\n            this.setState({\n                postsListClass: \"\",\n            })\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            posts: [],\n            postsListClass: \"card\",\n            next: null,\n            previous: null,\n            author: true,\n            count: 0\n        });\n        this.loadPosts()\n    }\n\n    render() {\n        const {posts} = this.state;\n        const {postsListClass} = this.state;\n        const {author} = this.state;\n        const {next} = this.state;\n        return (\n            <div className=\"container-fluid\">\n                {/*<h1>*/}\n                {/*    {author === true ?*/}\n                {/*        <Link className='mr-2'*/}\n                {/*              maintainScrollPosition={false}*/}\n                {/*              to={{*/}\n                {/*                  pathname: `/posts/create/`,*/}\n                {/*                  state: {fromDashboard: false}*/}\n                {/*              }}>Create Post</Link> : \"\"} <b/>*/}\n\n                    {/*<Button onClick={this.togglePostListClass}>List View</Button>*/}\n                {/*</h1>*/}\n                <br/>\n                    <div className=\"card-columns\">\n                        {posts.length > 0 ? posts.map((postItem, index) => {\n                            return (\n                                <PostInline post={postItem}\n                                            elClass={postsListClass}/>\n                                            )\n                        }) : <p>No Posts Found</p>}\n                        {next !== null ? <Button onClick={this.loadMorePosts}>Load\n                            more</Button> : ''}\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default Posts;","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport moment from 'moment'\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleDraftChange = this.handleDraftChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n        this.postTitleRef = React.createRef();\n        this.postContentRef = React.createRef();\n        this.state = {\n            draft: false,\n            title: null,\n            content: null,\n            publish: null,\n            errors: {}\n        }\n    }\n\n    createPost(data) {\n        const endpoint = '/api/posts/';\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                console.log(responseData);\n                if (thisComp.props.newPostItemCreated) {\n                    thisComp.props.newPostItemCreated(responseData)\n                }\n                thisComp.clearForm()\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occured, please try again later.\")\n            })\n        }\n\n    }\n\n    updatePost(data) {\n        const {post} = this.props;\n        const endpoint = `/api/posts/${post.slug}/`;\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"PUT\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                // console.log(responseData)\n                if (thisComp.props.postItemUpdated) {\n                    thisComp.props.postItemUpdated(responseData)\n                }\n\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occured, please try again later.\")\n            })\n        }\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let data = this.state;\n\n        const {post} = this.props;\n        if (post !== undefined) {\n            this.updatePost(data)\n        } else {\n            this.createPost(data)\n        }\n\n    }\n\n    handleInputChange(event) {\n        event.preventDefault();\n        let key = event.target.name;\n        let value = event.target.value;\n        if (key === 'title') {\n            if (value.length > 120) {\n                alert(\"This title is too long\")\n            }\n        }\n        this.setState({\n            [key]: value\n        })\n    }\n\n    handleDraftChange(event) {\n        this.setState({\n            draft: !this.state.draft\n        })\n    }\n\n    clearForm(event) {\n        if (event) {\n            event.preventDefault()\n        }\n        this.postCreateForm.reset();\n        this.defaultState()\n    }\n\n\n    clearFormRefs() {\n        this.postTitleRef.current = '';\n        this.postContentRef.current = ''\n    }\n\n\n    defaultState() {\n        this.setState({\n            draft: false,\n            title: null,\n            content: null,\n            publish: moment(new Date()).format('YYYY-MM-DD'),\n        })\n    }\n\n    componentDidMount() {\n        const {post} = this.props;\n        if (post !== undefined) {\n            this.setState({\n                draft: post.draft,\n                title: post.title,\n                content: post.content,\n                publish: moment(post.publish).format('YYYY-MM-DD'),\n            })\n        } else {\n            this.defaultState()\n        }\n        // this.postTitleRef.current.focus()\n    }\n\n    render() {\n        const {publish} = this.state;\n        const {title} = this.state;\n        const {content} = this.state;\n        const cancelClass = this.props.post !== undefined ? \"d-none\" : \"\";\n        let thisComp = this;\n        return (\n            <form onSubmit={this.handleSubmit}\n                  ref={(el) => this.postCreateForm = el}>\n                <div className='form-group'>\n                    <label for='title'>Post title</label>\n                    <input\n                        type='text'\n                        id='title'\n                        name='title'\n                        value={title}\n                        className='form-control'\n                        placeholder='Blog post title'\n                        ref={this.postTitleRef}\n                        onChange={this.handleInputChange}\n                        required='required'/>\n                </div>\n                <div className='form-group'>\n                    <label for='content'>Content</label>\n                    <textarea\n                        id='content'\n                        ref={this.postContentRef}\n                        name='content'\n                        value={content}\n                        className='form-control'\n                        placeholder='Post content'\n                        onChange={this.handleInputChange}\n                        required='required'/>\n\n                </div>\n                <div className='form-group'>\n                    <label for='draft'>\n                        <input type='checkbox' checked={this.state.draft}\n                               id='draft' name='draft' className='mr-2'\n                               onChange={this.handleDraftChange}/>\n                        Draft </label>\n                    <button onClick={(event) => {\n                        event.preventDefault();\n                        this.handleDraftChange()\n                    }}>Toggle Draft\n                    </button>\n                </div>\n                <div className='form-group'>\n                    <label for='publish'>Publish Date</label>\n                    <input\n                        type='date'\n                        id='publish'\n                        name='publish'\n                        className='form-control'\n                        onChange={this.handleInputChange}\n                        value={publish}\n                        required='required'/>\n                </div>\n                <button type='submit' className='btn btn-primary'>Save</button>\n                <button className={`btn btn-secondary`}\n                        onClick={this.clearForm}>Clear\n                </button>\n            </form>\n        )\n    }\n\n}\n\nexport default PostForm","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Link} from 'react-router-dom'\nimport twitLogo from './twitter.png'\nimport linkdLogo from './linkin.png'\nimport redditLogo from './reddit.svg'\nimport fbookLogo from './facebook.svg'\nimport PostForm from './PostForm'\nimport Moment from \"react-moment\";\nimport ReactMarkdown from \"react-markdown\";\n\nclass PostDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.handlePostItemUpdated = this.handlePostItemUpdated.bind(this);\n        this.state = {\n            slug: null,\n            post: null,\n            doneLoading: false,\n        }\n    }\n\n    handlePostItemUpdated(postItemData) {\n        this.setState({\n            post: postItemData\n        })\n    }\n\n    loadPost(slug) {\n        const endpoint = `/api/posts/${slug}/`;\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                if (response.status === 404) {\n                    console.log('Page not found')\n                }\n                return response.json()\n            }).then(function (responseData) {\n            if (responseData.detail) {\n                thisComp.setState({\n                    doneLoading: true,\n                    post: null\n                })\n            } else {\n                thisComp.setState({\n                    doneLoading: true,\n                    post: responseData\n                })\n            }\n        }).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            slug: null,\n            post: null\n        });\n        if (this.props.match) {\n            const {slug} = this.props.match.params;\n            this.setState({\n                slug: slug,\n                doneLoading: false\n            });\n            this.loadPost(slug)\n        }\n    }\n\n    buildUrl() {\n        const {post} = this.state;\n        return (\n         `https://vvayne.io/posts/${post.slug}` )\n         }\n\n    render() {\n        const {doneLoading} = this.state;\n        const {post} = this.state;\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n        return (\n            <p>{(doneLoading === true) ? <div class=\"Main\">\n                {post === null ? \"Not Found\" :\n                    <div className=\"container-fluid\">\n                        <div className='row'>\n                            <div className='col-md-10'>\n                                <h1 id='alt'>{post.title}</h1>\n                                <h4 id='alt'>By {post.author.username}</h4>\n                                <hr style={hrStyle}/>\n                                <h4>\n                                    <small\n                                        className=\"publish_date\"\n                                        id='alt'> Published: <Moment\n                                        fromNow\n                                        ago>{post.timestamp}</Moment> ago&nbsp;\n                                    </small>\n                                </h4>\n                                <hr style={hrStyle}/>\n                                <img src={post.unsplash_url}\n                                     class=\"rounded img-fluid\"\n                                     alt=\"sigil\"/>\n                                <hr style={hrStyle}/>\n                                <small id='shareIconsContainer'>\n                                    <a href={ `https://www.facebook.com/sharer/sharer.php?u=${this.buildUrl()}`}\n                                       id='shareIcons'><img\n                                        src={fbookLogo} alt=\"facebook\"\n                                    /></a> |&nbsp;\n                                    <a href={ `https://twitter.com/home?status=${this.buildUrl()}`}\n                                       id='shareIcons'><img\n                                        src={twitLogo} alt=\"twitter\"\n                                    /></a> |&nbsp;\n                                    <a href={ `https://www.linkedin.com/shareArticle?mini=true&url=${this.buildUrl()}&title=${post.title}&summary=${post.title}}&source=${this.buildUrl()}&`}\n                                       id='shareIcons'><img\n                                        src={linkdLogo} alt=\"linkdin\"\n                                    /></a> |&nbsp;\n                                    <a href={` http://www.reddit.com/submit?url=${this.buildUrl()}&title=${post.title}&`}\n                                       id='shareIcons'><img\n                                        src={redditLogo} alt=\"reddit\"\n                                    /></a>\n                                </small>\n                                <p id=\"alt\">\n                                    <ReactMarkdown\n                                        source={post.content}/>\n                                </p>\n\n                            </div>\n\n                            <div className='col-md-2'>\n                                <br/>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div> : \"Loading...\"}</p>\n        )\n    }\n}\n\nexport default PostDetail","import React, {Component} from 'react'\n\nimport PostForm from './PostForm'\n\nclass PostCreate extends Component {\n  render(){\n    return (\n      <div>\n      <h1>Create Post</h1>\n        <PostForm />\n      </div>\n    )\n  }\n\n}\n\nexport default PostCreate\n\n// left for reference\n\n\n\n\n// import React, {Component} from 'react'\n// import 'whatwg-fetch'\n// import cookie from 'react-cookies'\n// import moment from 'moment'\n\n// class PostCreate extends Component {\n//     constructor(props){\n//         super(props)\n//         this.handleSubmit = this.handleSubmit.bind(this)\n//         this.handleInputChange = this.handleInputChange.bind(this)\n//         this.handleDraftChange = this.handleDraftChange.bind(this)\n//         this.clearForm = this.clearForm.bind(this)\n//         this.postTitleRef = React.createRef()\n//         this.postContentRef = React.createRef()\n//         this.state = {\n//             draft: false,\n//             title: null,\n//             content: null,\n//             publish: null,\n//             errors: {}\n//         }\n//     }\n//     createPost(data){\n//       const endpoint = '/api/posts/' \n//       const csrfToken = cookie.load('csrftoken')\n//       let thisComp = this\n//       if (csrfToken !== undefined) {\n//           let lookupOptions = {\n//               method: \"POST\",\n//               headers: {\n//                   'Content-Type': 'application/json',\n//                   'X-CSRFToken': csrfToken\n//               },\n//               body: JSON.stringify(data),\n//               credentials: 'include'\n//           }\n\n//           fetch(endpoint, lookupOptions)\n//           .then(function(response){\n//               return response.json()\n//           }).then(function(responseData){\n//               console.log(responseData)\n//               if (thisComp.props.newPostItemCreated){\n//                   thisComp.props.newPostItemCreated(responseData)\n//               }\n//               thisComp.clearForm()\n//           }).catch(function(error){\n//               console.log(\"error\", error)\n//               alert(\"An error occured, please try again later.\")\n//           })\n//       } \n      \n//   }\n\n//     handleSubmit(event){\n//         event.preventDefault()\n//         let data = this.state\n//         this.createPost(data)\n//     }\n\n//     handleInputChange(event){\n//         event.preventDefault()\n//         let key = event.target.name\n//         let value = event.target.value\n//         if (key === 'title'){\n//             if (value.length > 120){\n//                 alert(\"This title is too long\")\n//             }\n//         }\n//         this.setState({\n//             [key]: value\n//         })\n//     }\n\n//     handleDraftChange(event){\n//       this.setState({\n//         draft: !this.state.draft\n//       })\n//     }\n\n//     clearForm(event){\n//       if (event){\n//         event.preventDefault()\n//       }\n//       this.postCreateForm.reset()\n//     }\n\n\n//     clearFormRefs(){\n//       this.postTitleRef.current=''\n//       this.postContentRef.current=''\n//     }\n\n\n//     componentDidMount(){\n//         this.setState({\n//             draft: false,\n//             title: null,\n//             content: null,\n//             publish: moment(new Date()).format('YYYY-MM-DD'),\n//         })\n//         this.postTitleRef.current.focus()\n//     }\n\n//     render(){\n//         const {publish} = this.state\n//         let thisComp = this\n//         return (\n//             <form onSubmit={this.handleSubmit} ref={(el) => this.postCreateForm = el}>\n//                 <div className='form-group'>\n//                     <label for='title'>Post title</label>\n//                     <input \n//                       type='text' \n//                       id='title' \n//                       name='title' \n//                       className='form-control'\n//                       placeholder='Blog post title' \n//                       ref = {this.postTitleRef}\n//                       onChange={this.handleInputChange} \n//                       required='required'/>\n//                 </div>\n//                  <div className='form-group'>\n//                     <label for='content'>Content</label>\n//                     <textarea id='content' ref = {this.postContentRef} name='content' className='form-control' placeholder='Post content' onChange={this.handleInputChange} required='required'/>\n                   \n//                 </div>\n//                 <div className='form-group'>\n//                     <label for='draft'>\n//                     <input type='checkbox' checked={this.state.draft} id='draft' name='draft' className='mr-2' onChange={this.handleDraftChange}/>\n//                      Draft </label>\n//                      <button onClick={(event)=>{event.preventDefault();this.handleDraftChange()}}>Toggle Draft</button>\n//                 </div>\n//                 <div className='form-group'>\n//                     <label for='publish'>Publish Date</label>\n//                     <input \n//                     type='date' \n//                     id='publish' \n//                     name='publish' \n//                     className='form-control' \n//                     onChange={this.handleInputChange}\n//                      value={publish}\n//                      required='required'/>\n//                 </div>\n//                 <button type='submit' className='btn btn-primary'>Save</button>\n//                 <button className='btn btn-secondary' onClick={this.clearForm}>Cancel</button>\n//             </form>\n//         )\n//     }\n\n// }\n\n// export default PostCreate","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport moment from 'moment'\n\nclass ScrapeForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n        this.scrapeLinkRef = React.createRef();\n        this.state = {\n            link: null,\n            errors: {}\n        }\n    }\n\n    createScrape(data) {\n        const endpoint = '/api/scrape/';\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                console.log(responseData);\n                if (thisComp.props.newScrapeItemCreated) {\n                    thisComp.props.newScrapeItemCreated(responseData)\n                    console.log('fetch worked')\n                }\n                thisComp.clearForm()\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occurred, please try again later.\")\n            })\n        }\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let data = this.state;\n\n        const {scrape} = this.props;\n        if (scrape !== undefined) {\n            this.createScrape(data);\n            console.log('trying to submit')\n        }\n        else {\n            this.clearFormRefs()\n        }\n\n    }\n\n    handleInputChange(event) {\n        event.preventDefault();\n        let key = event.target.name;\n        let value = event.target.value;\n        if (key === 'link') {\n            if (value.length > 120) {\n                alert(\"This link is too long\")\n            }\n        }\n        this.setState({\n            [key]: value\n        })\n    }\n\n    clearForm(event) {\n        if (event) {\n            event.preventDefault()\n        }\n        this.scrapeCreateForm.reset();\n        this.defaultState();\n        console.log('form cleared')\n    }\n\n\n    clearFormRefs() {\n        this.scrapeLinkRef.current = '';\n    }\n\n\n    defaultState() {\n        this.setState({\n            link: null,\n        })\n    }\n\n    componentDidMount() {\n        const {scrape} = this.props;\n        if (scrape !== undefined) {\n            this.setState({\n                link: scrape.link,\n            })\n        } else {\n            this.defaultState()\n        }\n        // this.postTitleRef.current.focus()\n    }\n\n    render() {\n        const {link} = this.state;\n        let thisComp = this;\n        return (\n            <form onSubmit={this.handleSubmit} ref={(el) => this.scrapeCreateForm = el}>\n                <div className='form-group'>\n                    <label for='title'>Scrape title</label>\n                    <input\n                        type='text'\n                        id='link'\n                        name='link'\n                        value={link}\n                        className='form-control'\n                        placeholder='Yelp Link'\n                        ref={this.scrapeLinkRef}\n                        onChange={this.handleInputChange}\n                        required='required'/>\n                </div>\n                <button type='submit' className='btn btn-primary'>Save</button>\n                <button className={`btn btn-secondary`}\n                        onClick={this.clearForm}>Clear</button>\n            </form>\n        )\n    }\n\n}\n\nexport default ScrapeForm","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Link} from 'react-router-dom'\nimport PostForm from './ScrapeForm'\nimport Moment from \"react-moment\";\nimport ReactMarkdown from \"react-markdown\";\n\nclass ScrapeDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.handlePostItemUpdated = this.handlePostItemUpdated.bind(this);\n        this.state = {\n            slug: null,\n            scrape: null,\n            doneLoading: false,\n        }\n    }\n\n    handlePostItemUpdated(scrapeItemData) {\n        this.setState({\n            scrape: scrapeItemData\n        })\n    }\n\n    loadPost(slug) {\n        const endpoint = `/api/scrape/${slug}/`;\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                if (response.status === 404) {\n                    console.log('Page not found')\n                }\n                return response.json()\n            }).then(function (responseData) {\n            if (responseData.detail) {\n                thisComp.setState({\n                    doneLoading: true,\n                    scrape: null\n                })\n            } else {\n                thisComp.setState({\n                    doneLoading: true,\n                    scrape: responseData\n                })\n            }\n        }).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            slug: null,\n            scrape: null\n        });\n        if (this.props.match) {\n            const {slug} = this.props.match.params;\n            this.setState({\n                slug: slug,\n                doneLoading: false\n            });\n            this.loadPost(slug)\n        }\n    }\n\n    buildUrl() {\n        const {scrape} = this.state;\n        return (\n         `https://vvayne.io/scrape/${scrape.slug}` )\n         }\n\n    render() {\n        const {doneLoading} = this.state;\n        const {scrape} = this.state;\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n        return (\n            <p>{(doneLoading === true) ? <div class=\"Main\">\n                {scrape === null ? \"Not Found\" :\n                    <div className=\"container-fluid\">\n                        <Link maintainScrollPosition={false} to={{\n                            pathname: `/scrape/create`,\n                            state: {fromDashboard: false}\n                        }}>New Scrape</Link>\n                        <br/>\n                        <h1>test</h1>\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                <td className=\"dash\"><b>{scrape.author}</b> | </td>\n                                <td className=\"dash\"><b>{scrape.date}</b> | </td>\n                                <td className=\"dash\"><b>{scrape.rating}</b></td>\n                                <p className=\"dash\">{scrape.review}</p>\n                                <hr style=\"border-color: white\"/>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div> : \"Loading...\"}</p>\n        )\n    }\n}\n\nexport default ScrapeDetail","import React, {Component} from 'react'\n\nimport ScrapeForm from './ScrapeForm'\n\nclass ScrapeCreate extends Component {\n  render(){\n    return (\n      <div>\n      <h1>Create Scrape</h1>\n        <ScrapeForm />\n      </div>\n    )\n  }\n\n}\n\nexport default ScrapeCreate","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch} from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Posts from './posts/Posts';\nimport PostDetail from './posts/PostDetail';\nimport PostCreate from './posts/PostCreate'\n\nimport ScrapeDetail from './scrape/ScrapeDetail';\nimport ScrapeCreate from './scrape/ScrapeCreate'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n          <Switch>\n            <Route exact path='/posts/create' component={PostCreate}/>\n            <Route exact path='/posts/' component={Posts}/>\n            <Route exact path='/posts/:slug' component={PostDetail}/>\n            <Route exact path='/scrape/create' component={ScrapeCreate}/>\n            <Route exact path='/scrape/results/:slug' component={ScrapeDetail}/>\n            {/*<Route component={Posts}/>*/}\n          </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/twitter.bdda731e.png\";","module.exports = __webpack_public_path__ + \"static/media/linkin.34ca7885.png\";","module.exports = __webpack_public_path__ + \"static/media/reddit.12eae182.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.a75369d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}