{"version":3,"sources":["logo.svg","posts/twitter.png","posts/linkin.png","posts/reddit.svg","posts/facebook.svg","posts/PostInline.js","posts/Posts.js","posts/PostForm.js","posts/PostDetail.js","posts/PostCreate.js","scrape/ScrapeInline.js","scrape/ScrapeDetail.js","scrape/ScrapeForm.js","scrape/ScrapeCreate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PostInline","post","this","props","elClass","showContent","react_default","a","createElement","className","src","unsplash_url","class","alt","href","TARGET","Link","maintainScrollPosition","to","pathname","concat","slug","state","fromDashboard","title","draft","dist_default","fromNow","ago","timestamp","read_time","react_markdown_default","source","content","slice","trim","Component","Posts","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","togglePostListClass","bind","assertThisInitialized","handleNewPost","loadMorePosts","posts","postsPublic","postsListClass","next","previous","author","count","undefined","loadPosts","nextEndpoint","endpoint","thisComp","lookupOptions","method","headers","Content-Type","csrfToken","cookie","load","fetch","then","response","json","responseData","postsPublicList","results","filter","setState","staff","catch","error","console","log","postItemData","currentPosts","unshift","event","preventDefault","length","map","postItem","index","posts_PostInline","Button_default","variant","onClick","PostForm","handleSubmit","handleInputChange","handleDraftChange","clearForm","postTitleRef","React","createRef","postContentRef","publish","errors","data","X-CSRFToken","body","JSON","stringify","credentials","newPostItemCreated","alert","postItemUpdated","updatePost","createPost","key","target","name","value","defineProperty","postCreateForm","reset","defaultState","current","moment","Date","format","_this2","onSubmit","ref","el","for","type","id","placeholder","onChange","required","checked","PostDetail","handlePostItemUpdated","doneLoading","status","detail","match","params","loadPost","hrStyle","display","height","border","borderTop","margin","padding","color","username","style","EmailShareButton","url","buildUrl","EmailIcon","size","round","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","LinkedinShareButton","LinkedinIcon","RedditShareButton","RedditIcon","InstapaperShareButton","InstapaperIcon","PostCreate","posts_PostForm","ScrapeInline","reviews","date","rating","review","ScrapeDetail","scrape","scrapeItemData","loadReviews","business_name","csvDownload","buildFileName","scrapeItem","scrape_ScrapeInline","role","Redirect","ScrapeForm","scrapeLinkRef","link","redirect","redirectLink","scraping","createScrape","clearFormRefs","scrapeCreateForm","_this3","react_loader_spinner_default","width","ScrapeCreate","scrape_ScrapeForm","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qRC4DzBC,mLArDF,IACEC,EAAQC,KAAKC,MAAbF,KACAG,EAAWF,KAAKC,MAAhBC,QACDC,EAA0B,SAAZD,EAAqB,UAAY,SACrD,OAEIE,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,GACZE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKT,EAAKU,aACVC,MAAM,eACNC,IAAK,UACVP,EAAAC,EAAAC,cAAA,SAAOI,MAAM,gBAAeN,EAAAC,EAAAC,cAAA,KACxBM,KAAK,kDACLC,OAAO,UAFiB,iBAG5BT,EAAAC,EAAAC,cAAA,MAAII,MAAM,SACNN,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,wBAAwB,EAAOC,GAAI,CACrCC,SAAQ,UAAAC,OAAYnB,EAAKoB,MACzBC,MAAO,CAACC,eAAe,KACvBtB,EAAKuB,QACO,IAAfvB,EAAKwB,MACNnB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAjB,UAAwC,IAC5CH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SACII,MAAM,gBADV,eACqCN,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACjCoB,SAAO,EACPC,KAAG,GAAE3B,EAAK4B,WAHd,SASJvB,EAAAC,EAAAC,cAAA,wBACgBP,EAAK6B,UADrB,SAGAxB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAWJ,GACVC,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CACIyB,OAAQ/B,EAAKgC,QAAQC,MAAM,EAAG,KAAKC,OAAOf,OAAO,SAASd,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAC9DC,wBAAwB,EAAOC,GAAI,CACnCC,SAAQ,UAAAC,OAAYnB,EAAKoB,MACzBC,MAAO,CAACC,eAAe,KAEvBjB,EAAAC,EAAAC,cAAA,UAAQC,UAAS,mBAAjB,wBA5CC2B,8BCuKVC,cAnKX,SAAAA,EAAYlC,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAAmC,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzC,KAAMC,KACDyC,oBAAsBN,EAAKM,oBAAoBC,KAAzBN,OAAAO,EAAA,EAAAP,CAAAD,IAC3BA,EAAKS,cAAgBT,EAAKS,cAAcF,KAAnBN,OAAAO,EAAA,EAAAP,CAAAD,IACrBA,EAAKU,cAAgBV,EAAKU,cAAcH,KAAnBN,OAAAO,EAAA,EAAAP,CAAAD,IACrBA,EAAKhB,MAAQ,CACT2B,MAAO,GACPC,YAAa,GACbC,eAAgB,OAChBC,KAAM,KACNC,SAAU,KACVC,QAAQ,EACR7B,MAAO,KACP8B,MAAO,GAbIjB,+EAiBH,IACLc,EAAQlD,KAAKoB,MAAb8B,KACM,OAATA,QAA0BI,IAATJ,GACjBlD,KAAKuD,UAAUL,qCAKbM,GACN,IAAIC,EAAW,mBACMH,IAAjBE,IACAC,EAAWD,GAEf,IAAIE,EAAW1D,KACX2D,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,qBAGlBC,EAAYC,IAAOC,KAAK,kBACZX,IAAdS,IACAJ,EAAa,YAAkB,UAC/BA,EAAa,QAAY,eAAiBI,GAG9CG,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GAGd,IAAIC,EAAkBD,EAAaE,QAAQC,OAAO,SAAA1E,GAAI,OAAmB,IAAfA,EAAKwB,QAE/DmC,EAASgB,SAAS,CACd3B,MAAOW,EAAStC,MAAM2B,MAAM7B,OAAOoD,EAAaE,SAChDxB,YAAaU,EAAStC,MAAM4B,YAAY9B,OAAOqD,GAC/CrB,KAAMoB,EAAapB,KACnBC,SAAUmB,EAAanB,SACvBwB,MAAOL,EAAaK,MACpBpD,MAAO+C,EAAa/C,MACpB8B,MAAOiB,EAAajB,UAG9BuB,MAAM,SAAUC,GACdC,QAAQC,IAAI,QAASF,yCAIjBP,GACR,IAAIvB,EAAQuB,EAAaG,OAAO,SAAA1E,GAAI,OAAmB,IAAfA,EAAKwB,QAC7CvB,KAAK0E,SAAS,CACV1B,YAAaD,0CAIPiC,GAEV,IAAIC,EAAejF,KAAKoB,MAAM2B,MAC9BkC,EAAaC,QAAQF,GACrBhF,KAAK0E,SAAS,CACV3B,MAAOkC,gDAKKE,GAChBA,EAAMC,iBAEmB,KADFpF,KAAKoB,MAAM6B,eAE9BjD,KAAK0E,SAAS,CACVzB,eAAgB,SAGpBjD,KAAK0E,SAAS,CACVzB,eAAgB,iDAOxBjD,KAAK0E,SAAS,CACV3B,MAAO,GACPE,eAAgB,OAChBC,KAAM,KACNC,SAAU,KAEVE,MAAO,IAEXrD,KAAKuD,6CAGA,IACER,EAAS/C,KAAKoB,MAAd2B,MACAC,EAAehD,KAAKoB,MAApB4B,YACAC,EAAkBjD,KAAKoB,MAAvB6B,eACA0B,EAAS3E,KAAKoB,MAAduD,MACPG,QAAQC,IAAIJ,GALP,IAMEzB,EAAQlD,KAAKoB,MAAb8B,KACP,OACI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAYXH,EAAAC,EAAAC,cAAA,YACW,IAAVqE,EACGvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVwC,EAAMsC,OAAS,EAAItC,EAAMuC,IAAI,SAACC,EAAUC,GACrC,OACIpF,EAAAC,EAAAC,cAACmF,EAAD,CAAY1F,KAAMwF,EACNrF,QAAS+C,MAExB7C,EAAAC,EAAAC,cAAA,4BAITF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVwC,EAAMsC,OAAS,EAAIrC,EAAYsC,IAAI,SAACC,EAAUC,GAC3C,OACIpF,EAAAC,EAAAC,cAACmF,EAAD,CAAY1F,KAAMwF,EACNrF,QAAS+C,MAExB7C,EAAAC,EAAAC,cAAA,4BAGbF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACD,OAAT2C,EAAgB9C,EAAAC,EAAAC,cAACoF,EAAArF,EAAD,CACbsF,QAAQ,gBACRC,QAAS5F,KAAK8C,eAFD,aAGG,IAExB1C,EAAAC,EAAAC,cAAA,mBA/JI4B,oEC4NL2D,cA7NX,SAAAA,EAAY5F,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAA6F,IACfzD,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAwD,GAAApD,KAAAzC,KAAMC,KACD6F,aAAe1D,EAAK0D,aAAanD,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IACpBA,EAAK2D,kBAAoB3D,EAAK2D,kBAAkBpD,KAAvBN,OAAAO,EAAA,EAAAP,CAAAD,IACzBA,EAAK4D,kBAAoB5D,EAAK4D,kBAAkBrD,KAAvBN,OAAAO,EAAA,EAAAP,CAAAD,IACzBA,EAAK6D,UAAY7D,EAAK6D,UAAUtD,KAAfN,OAAAO,EAAA,EAAAP,CAAAD,IACjBA,EAAK8D,aAAeC,IAAMC,YAC1BhE,EAAKiE,eAAiBF,IAAMC,YAC5BhE,EAAKhB,MAAQ,CACTG,OAAO,EACPD,MAAO,KACPS,QAAS,KACTuE,QAAS,KACTC,OAAQ,IAbGnE,0EAiBRoE,GACP,IACMzC,EAAYC,IAAOC,KAAK,aAC1BP,EAAW1D,KACf,QAAkBsD,IAAdS,EAAyB,CACzB,IAAIJ,EAAgB,CAChBC,OAAQ,OACRC,QAAS,CACLC,eAAgB,mBAChB2C,cAAe1C,GAEnB2C,KAAMC,KAAKC,UAAUJ,GACrBK,YAAa,WAGjB3C,MAda,cAcGP,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GAClBQ,QAAQC,IAAIT,GACRZ,EAASzD,MAAM6G,oBACfpD,EAASzD,MAAM6G,mBAAmBxC,GAEtCZ,EAASuC,cACVrB,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,GACrBkC,MAAM,mFAMPP,GAAM,IACNzG,EAAQC,KAAKC,MAAbF,KACD0D,EAAQ,cAAAvC,OAAiBnB,EAAKoB,KAAtB,KACR4C,EAAYC,IAAOC,KAAK,aAC1BP,EAAW1D,KACf,QAAkBsD,IAAdS,EAAyB,CACzB,IAAIJ,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,mBAChB2C,cAAe1C,GAEnB2C,KAAMC,KAAKC,UAAUJ,GACrBK,YAAa,WAGjB3C,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GAEdZ,EAASzD,MAAM+G,iBACftD,EAASzD,MAAM+G,gBAAgB1C,KAGpCM,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,GACrBkC,MAAM,qFAML5B,GACTA,EAAMC,iBACN,IAAIoB,EAAOxG,KAAKoB,WAGHkC,IADEtD,KAAKC,MAAbF,KAEHC,KAAKiH,WAAWT,GAEhBxG,KAAKkH,WAAWV,6CAKNrB,GACdA,EAAMC,iBACN,IAAI+B,EAAMhC,EAAMiC,OAAOC,KACnBC,EAAQnC,EAAMiC,OAAOE,MACb,UAARH,GACIG,EAAMjC,OAAS,KACf0B,MAAM,0BAGd/G,KAAK0E,SAALrC,OAAAkF,EAAA,EAAAlF,CAAA,GACK8E,EAAMG,8CAIGnC,GACdnF,KAAK0E,SAAS,CACVnD,OAAQvB,KAAKoB,MAAMG,0CAIjB4D,GACFA,GACAA,EAAMC,iBAEVpF,KAAKwH,eAAeC,QACpBzH,KAAK0H,uDAKL1H,KAAKkG,aAAayB,QAAU,GAC5B3H,KAAKqG,eAAesB,QAAU,0CAK9B3H,KAAK0E,SAAS,CACVnD,OAAO,EACPD,MAAO,KACPS,QAAS,KACTuE,QAASsB,IAAO,IAAIC,MAAQC,OAAO,4DAIvB,IACT/H,EAAQC,KAAKC,MAAbF,UACMuD,IAATvD,EACAC,KAAK0E,SAAS,CACVnD,MAAOxB,EAAKwB,MACZD,MAAOvB,EAAKuB,MACZS,QAAShC,EAAKgC,QACduE,QAASsB,IAAO7H,EAAKuG,SAASwB,OAAO,gBAGzC9H,KAAK0H,gDAKJ,IAAAK,EAAA/H,KACEsG,EAAWtG,KAAKoB,MAAhBkF,QACAhF,EAAStB,KAAKoB,MAAdE,MACAS,EAAW/B,KAAKoB,MAAhBW,QACa/B,KAAKC,MAAMF,KAE/B,OACIK,EAAAC,EAAAC,cAAA,QAAM0H,SAAUhI,KAAK8F,aAAcmC,IAAK,SAACC,GAAD,OAAQH,EAAKP,eAAiBU,IAClE9H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAO6H,IAAI,SAAX,cACA/H,EAAAC,EAAAC,cAAA,SACI8H,KAAK,OACLC,GAAG,QACHhB,KAAK,QACLC,MAAOhG,EACPf,UAAU,eACV+H,YAAY,kBACZL,IAAKjI,KAAKkG,aACVqC,SAAUvI,KAAK+F,kBACfyC,SAAS,cAEjBpI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAO6H,IAAI,WAAX,WACA/H,EAAAC,EAAAC,cAAA,YACI+H,GAAG,UACHJ,IAAKjI,KAAKqG,eACVgB,KAAK,UACLC,MAAOvF,EACPxB,UAAU,eACV+H,YAAY,eACZC,SAAUvI,KAAK+F,kBACfyC,SAAS,cAGjBpI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAO6H,IAAI,SACP/H,EAAAC,EAAAC,cAAA,SAAO8H,KAAK,WAAWK,QAASzI,KAAKoB,MAAMG,MACpC8G,GAAG,QAAQhB,KAAK,QAAQ9G,UAAU,OAClCgI,SAAUvI,KAAKgG,oBAH1B,UAKA5F,EAAAC,EAAAC,cAAA,UAAQsF,QAAS,SAACT,GACdA,EAAMC,iBACN2C,EAAK/B,sBAFT,iBAMJ5F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAO6H,IAAI,WAAX,gBACA/H,EAAAC,EAAAC,cAAA,SACI8H,KAAK,OACLC,GAAG,UACHhB,KAAK,UACL9G,UAAU,eACVgI,SAAUvI,KAAK+F,kBACfuB,MAAOhB,EACPkC,SAAS,cAEjBpI,EAAAC,EAAAC,cAAA,UAAQ8H,KAAK,SAAS7H,UAAU,mBAAhC,QACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAS,oBACTqF,QAAS5F,KAAKiG,WADtB,iBArNO/D,yHCsLRwG,cAhKX,SAAAA,EAAYzI,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAA0I,IACftG,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAqG,GAAAjG,KAAAzC,KAAMC,KACD0I,sBAAwBvG,EAAKuG,sBAAsBhG,KAA3BN,OAAAO,EAAA,EAAAP,CAAAD,IAC7BA,EAAKhB,MAAQ,CACTD,KAAM,KACNpB,KAAM,KACN6I,aAAa,GANFxG,qFAUG4C,GAClBhF,KAAK0E,SAAS,CACV3E,KAAMiF,qCAIL7D,GACL,IAAMsC,EAAQ,cAAAvC,OAAiBC,EAAjB,KACVuC,EAAW1D,KACX2D,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,qBAIlBC,EAAYC,IAAOC,KAAK,kBACZX,IAAdS,IACAJ,EAAa,YAAkB,UAC/BA,EAAa,QAAY,eAAiBI,GAG9CG,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GAIZ,OAHwB,MAApBA,EAASyE,QACT/D,QAAQC,IAAI,kBAETX,EAASC,SACjBF,KAAK,SAAUG,GACdA,EAAawE,OACbpF,EAASgB,SAAS,CACdkE,aAAa,EACb7I,KAAM,OAGV2D,EAASgB,SAAS,CACdkE,aAAa,EACb7I,KAAMuE,MAGfM,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,iDAUzB,GAJA7E,KAAK0E,SAAS,CACVvD,KAAM,KACNpB,KAAM,OAENC,KAAKC,MAAM8I,MAAO,KACX5H,EAAQnB,KAAKC,MAAM8I,MAAMC,OAAzB7H,KACPnB,KAAK0E,SAAS,CACVvD,KAAMA,EACNyH,aAAa,IAEjB5I,KAAKiJ,SAAS9H,uCAIX,IACApB,EAAQC,KAAKoB,MAAbrB,KACP,iCAAAmB,OAC+BnB,EAAKoB,uCAG/B,IACEyH,EAAe5I,KAAKoB,MAApBwH,YACA7I,EAAQC,KAAKoB,MAAbrB,KACDmJ,EAAU,CACZC,QAAS,QACTC,OAAQ,MACRC,OAAQ,EACRC,UAAW,iBACXC,OAAQ,QACRC,QAAS,IACTC,MAAO,SAEX,OACIrJ,EAAAC,EAAAC,cAAA,UAAqB,IAAhBsI,EAAwBxI,EAAAC,EAAAC,cAAA,OAAKI,MAAM,QAC1B,OAATX,EAAgB,YACbK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAI+H,GAAG,OAAOtI,EAAKuB,OACnBlB,EAAAC,EAAAC,cAAA,MAAI+H,GAAG,OAAP,MAAiBtI,EAAKqD,OAAOsG,UAC7BtJ,EAAAC,EAAAC,cAAA,MAAIqJ,MAAOT,IACX9I,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SACIC,UAAU,eACV8H,GAAG,OAFP,eAEyBjI,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACrBoB,SAAO,EACPC,KAAG,GAAE3B,EAAK4B,WAJd,aAOJvB,EAAAC,EAAAC,cAAA,MAAIqJ,MAAOT,IACX9I,EAAAC,EAAAC,cAAA,OAAKE,IAAKT,EAAKU,aACVC,MAAM,oBACNC,IAAI,UACTP,EAAAC,EAAAC,cAAA,MAAIqJ,MAAOT,IACV9I,EAAAC,EAAAC,cAAA,SAAO+H,GAAG,uBACPjI,EAAAC,EAAAC,cAACsJ,EAAA,EAAD,CAAkBC,IAAK7J,KAAK8J,YACxB1J,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,CAAWC,KAAM,GAAIC,OAAO,MAGpC7J,EAAAC,EAAAC,cAAA,SAAO+H,GAAG,uBACNjI,EAAAC,EAAAC,cAAC4J,EAAA,EAAD,CAAqBL,IAAK7J,KAAK8J,YAC3B1J,EAAAC,EAAAC,cAAC6J,EAAA,EAAD,CAAcH,KAAM,GAAIC,OAAO,MAGvC7J,EAAAC,EAAAC,cAAA,SAAO+H,GAAG,uBACNjI,EAAAC,EAAAC,cAAC8J,EAAA,EAAD,CAAoBP,IAAK7J,KAAK8J,YAC1B1J,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAaL,KAAM,GAAIC,OAAO,MAGtC7J,EAAAC,EAAAC,cAAA,SAAO+H,GAAG,uBACNjI,EAAAC,EAAAC,cAACgK,EAAA,EAAD,CAAqBT,IAAK7J,KAAK8J,YAC3B1J,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CAAcP,KAAM,GAAIC,OAAO,MAGvC7J,EAAAC,EAAAC,cAAA,SAAO+H,GAAG,uBACNjI,EAAAC,EAAAC,cAACkK,EAAA,EAAD,CAAmBX,IAAK7J,KAAK8J,YACzB1J,EAAAC,EAAAC,cAACmK,EAAA,EAAD,CAAYT,KAAM,GAAIC,OAAO,MAGrC7J,EAAAC,EAAAC,cAAA,SAAO+H,GAAG,uBACNjI,EAAAC,EAAAC,cAACoK,EAAA,EAAD,CACIb,IAAK7J,KAAK8J,YACV1J,EAAAC,EAAAC,cAACqK,EAAA,EAAD,CAAgBX,KAAM,GAAIC,OAAO,MAGzC7J,EAAAC,EAAAC,cAAA,KAAG+H,GAAG,OACFjI,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CACIyB,OAAQ/B,EAAKgC,YAKzB3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,eAKX,qBA5JI4B,aCVV0I,mLAVX,OACExK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yBACEF,EAAAC,EAAAC,cAACuK,EAAD,cALiB3I,aCuBV4I,mLAvBF,IACEC,EAAW/K,KAAKC,MAAhB8K,QAUP,OACI3K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,SAAIyK,EAAQ3H,QAAjC,MACAhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,SAAIyK,EAAQC,MAAjC,MACA5K,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,SAAIyK,EAAQE,SACjC7K,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQwK,EAAQG,QAC7B9K,EAAAC,EAAAC,cAAA,MAAIqJ,MAfI,CACZR,QAAS,QACTC,OAAQ,MACRC,OAAQ,EACRC,UAAW,iBACXC,OAAQ,QACRC,QAAS,IACTC,MAAO,mBAXQvH,wCC6JZiJ,cArJX,SAAAA,EAAYlL,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAAmL,IACf/I,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAA8I,GAAA1I,KAAAzC,KAAMC,KACD0I,sBAAwBvG,EAAKuG,sBAAsBhG,KAA3BN,OAAAO,EAAA,EAAAP,CAAAD,IAC7BA,EAAKhB,MAAQ,CACTD,KAAM,KACNiK,OAAQ,KACRxC,aAAa,GANFxG,qFAUGiJ,GAClBrL,KAAK0E,SAAS,CACV0G,OAAQC,wCAIJlK,GACR,IAAMsC,EAAQ,eAAAvC,OAAkBC,EAAlB,KACVuC,EAAW1D,KACX2D,EAAgB,CAChBC,OAAQ,MACRC,QAAS,CACLC,eAAgB,qBAIlBC,EAAYC,IAAOC,KAAK,kBACZX,IAAdS,IACAJ,EAAa,YAAkB,UAC/BA,EAAa,QAAY,eAAiBI,GAG9CG,MAAMT,EAAUE,GACXQ,KAAK,SAAUC,GAIZ,OAHwB,MAApBA,EAASyE,QACT/D,QAAQC,IAAI,kBAETX,EAASC,SACjBF,KAAK,SAAUG,GACdA,EAAawE,OACbpF,EAASgB,SAAS,CACdkE,aAAa,EACbwC,OAAQ,OAGZ1H,EAASgB,SAAS,CACdkE,aAAa,EACbwC,OAAQ9G,MAGjBM,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,iDASzB,GAHA7E,KAAK0E,SAAS,CACVvD,KAAM,OAENnB,KAAKC,MAAM8I,MAAO,KACX5H,EAAQnB,KAAKC,MAAM8I,MAAMC,OAAzB7H,KACPnB,KAAK0E,SAAS,CACVvD,KAAMA,EACNyH,aAAa,IAEjB5I,KAAKsL,YAAYnK,uCAId,IACAiK,EAAUpL,KAAKoB,MAAfgK,OACP,0CAAAlK,OACwCkK,EAAOjK,8CAGnC,IACLiK,EAAUpL,KAAKoB,MAAfgK,OACP,SAAAlK,OACOkK,EAAOG,cADd,yCAaK,IAAAxD,EAAA/H,KACE4I,EAAe5I,KAAKoB,MAApBwH,YACAwC,EAAUpL,KAAKoB,MAAfgK,OACPtG,QAAQC,IAAIqG,GAUZ,OACIhL,EAAAC,EAAAC,cAAA,UAAqB,IAAhBsI,EAAwBxI,EAAAC,EAAAC,cAAA,OAAKI,MAAM,QACxB,OAAX0K,EAAkB,6NAKfhL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,wBAAwB,EAAOC,GAAI,CACrCC,SAAQ,UACRG,MAAO,CAACC,eAAe,KAGvBjB,EAAAC,EAAAC,cAAA,UAAQC,UAAS,mBAAjB,eAIJH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAK8K,EAAOG,eACZnL,EAAAC,EAAAC,cAACoF,EAAArF,EAAD,CAAQsF,QAAQ,YACRC,QAAS,kBAAM4F,IAAYJ,EAAOL,QAAShD,EAAK0D,mBADxD,iBAIArL,EAAAC,EAAAC,cAAA,MAAIqJ,MAjCJ,CACZR,QAAS,QACTC,OAAQ,MACRC,OAAQ,EACRC,UAAW,iBACXC,OAAQ,QACRC,QAAS,IACTC,MAAO,WA2BKrJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACV6K,EAAOL,QAAQ1F,OAAS,EAAI+F,EAAOL,QAAQzF,IAAI,SAACoG,EAAYlG,GACzD,OACIpF,EAAAC,EAAAC,cAACqL,EAAD,CAAcZ,QAASW,MAI1BtL,EAAAC,EAAAC,cAAA,gCAOZF,EAAAC,EAAAC,cAAA,OAAKI,MAAM,iBAAiBkL,KAAK,UACtCxL,EAAAC,EAAAC,cAAA,QAAMI,MAAM,WAAZ,wDA1DR,OACIN,EAAAC,EAAAC,cAACuL,EAAA,EAAD,CAAU7K,GAFN,0BAtFWkB,+BCoJZ4J,cAtJX,SAAAA,EAAY7L,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArC,KAAA8L,IACf1J,EAAAC,OAAAE,EAAA,EAAAF,CAAArC,KAAAqC,OAAAG,EAAA,EAAAH,CAAAyJ,GAAArJ,KAAAzC,KAAMC,KACD6F,aAAe1D,EAAK0D,aAAanD,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IACpBA,EAAK2D,kBAAoB3D,EAAK2D,kBAAkBpD,KAAvBN,OAAAO,EAAA,EAAAP,CAAAD,IACzBA,EAAK6D,UAAY7D,EAAK6D,UAAUtD,KAAfN,OAAAO,EAAA,EAAAP,CAAAD,IACjBA,EAAK2J,cAAgB5F,IAAMC,YAC3BhE,EAAKhB,MAAQ,CACT4K,KAAM,KACNC,UAAU,EACV9K,KAAM,KACN+K,aAAc,KACdC,SAAU,KACV5F,OAAQ,IAZGnE,4EAgBNoE,GAAM,IAAAuB,EAAA/H,KAET+D,EAAYC,IAAOC,KAAK,aAC1BP,EAAW1D,KACf,QAAkBsD,IAAdS,EAAyB,CACzB,IAAIJ,EAAgB,CAChBC,OAAQ,OACRC,QAAS,CACLC,eAAgB,mBAChB2C,cAAe1C,GAEnB2C,KAAMC,KAAKC,UAAUJ,GACrBK,YAAa,WAGjB3C,MAda,eAcGP,GACXQ,KAAK,SAAUC,GACZ,OAAOA,EAASC,SACjBF,KAAK,SAAUG,GACdZ,EAASgB,SAAS,CAACwH,aAAY,mBAAAhL,OAAqBoD,EAAanD,MAAQgL,SAAU,OACnFrH,QAAQC,IAAR,kBAAA7D,OAA8BoD,EAAanD,OAC/CuC,EAASuC,cACVrB,MAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,GACrBkC,MAAM,gDACP5C,KAAK,kBAAM4D,EAAKrD,SAAS,CAAEuH,UAAU,4CAanC9G,GACTA,EAAMC,iBACN,IAAIoB,EAAOxG,KAAKoB,WAGDkC,IADEtD,KAAKC,MAAfmL,QAEPpL,KAAK0E,SAAS,CAACyH,UAAU,IACzBnM,KAAKoM,aAAa5F,IAGdxG,KAAKqM,0DAKKlH,GACdA,EAAMC,iBACN,IAAI+B,EAAMhC,EAAMiC,OAAOC,KACnBC,EAAQnC,EAAMiC,OAAOE,MACb,SAARH,GACIG,EAAMjC,OAAS,KACf0B,MAAM,yBAGd/G,KAAK0E,SAALrC,OAAAkF,EAAA,EAAAlF,CAAA,GACK8E,EAAMG,sCAILnC,GACFA,GACAA,EAAMC,iBAEVpF,KAAKsM,iBAAiB7E,QACtBzH,KAAK0H,uDAKL1H,KAAK+L,cAAcpE,QAAU,0CAK7B3H,KAAK0E,SAAS,CACVsH,KAAM,mDAIM,IACTZ,EAAUpL,KAAKC,MAAfmL,YACQ9H,IAAX8H,EACApL,KAAK0E,SAAS,CACVsH,KAAMZ,EAAOY,OAGjBhM,KAAK0H,gDAKJ,IAAA6E,EAAAvM,KACEgM,EAAQhM,KAAKoB,MAAb4K,KACCC,EAAajM,KAAKoB,MAAlB6K,SACAC,EAAiBlM,KAAKoB,MAAtB8K,aAER,OADqBlM,KAAKoB,MAAlB+K,SAEG/L,EAAAC,EAAAC,cAAA,OAAK+H,GAAG,gBAAejI,EAAAC,EAAAC,cAACkM,EAAAnM,EAAD,CAAQ+H,KAAK,OAAOqB,MAAM,UAAUL,OAAO,MAAMqD,MAAM,QAA9E,gBAEPR,EACG7L,EAAAC,EAAAC,cAACuL,EAAA,EAAD,CAAU7K,GAAIkL,IAGjB9L,EAAAC,EAAAC,cAAA,QAAM0H,SAAUhI,KAAK8F,aAAcmC,IAAK,SAACC,GAAD,OAAQqE,EAAKD,iBAAmBpE,IACpE9H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SACI8H,KAAK,OACLC,GAAG,OACHhB,KAAK,OACLC,MAAO0E,EACPzL,UAAU,eACV+H,YAAY,YACZL,IAAKjI,KAAK+L,cACVxD,SAAUvI,KAAK+F,kBACfyC,SAAS,cAEjBpI,EAAAC,EAAAC,cAAA,UAAQ8H,KAAK,SAAS7H,UAAU,mBAAhC,UAbJ,OAeIH,EAAAC,EAAAC,cAAA,UAAQC,UAAS,oBACTqF,QAAS5F,KAAKiG,WADtB,iBA/IS/D,aC8BVwK,mLA9BP,OACItM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,qEAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAO8H,GAAG,WAAvB,iBACIjI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAO8H,GAAG,WAAxB,yCAEAjI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAO8H,GAAG,WAAxB,wDAEHjI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACVH,EAAAC,EAAAC,cAAA,8FAGHF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,+IAMTH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACqM,EAAD,cAzBWzK,aCyBZ0K,oLAfX,OACExM,EAAAC,EAAAC,cAACuM,EAAA,EAAD,KACIzM,EAAAC,EAAAC,cAACwM,EAAA,EAAD,KACE1M,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWtC,IAC7CxK,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAW/K,IACvC/B,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,UAAWxE,IAC5CtI,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWR,IACxCtM,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,wBAAwBC,UAAW/B,aAT/CjJ,aCAEiL,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvE,MACvB,2DCZNwE,IAASC,OAAOpN,EAAAC,EAAAC,cAACmN,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3J,KAAK,SAAA4J,GACjCA,EAAaC","file":"static/js/main.712d6160.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.bdda731e.png\";","module.exports = __webpack_public_path__ + \"static/media/linkin.34ca7885.png\";","module.exports = __webpack_public_path__ + \"static/media/reddit.12eae182.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.a75369d0.svg\";","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom'\nimport ReactMarkdown from 'react-markdown'\nimport Moment from 'react-moment';\n\nclass PostInline extends Component {\n\n    render() {\n        const {post} = this.props;\n        const {elClass} = this.props;\n        const showContent = elClass === 'card' ? 'd-block' : 'd-none';\n        return (\n\n            <div className={elClass}>\n                <div className=\"card-body\">\n                    <img src={post.unsplash_url}\n                         class=\"card-img-top\"\n                         alt={'sigil'}/>\n                    <small class=\"image_source\"><a\n                        href='https://unsplash.com/photos/{post.unsplash_url}'\n                        TARGET=\"_blank\">Image Source</a></small>\n                    <h1 class=\"title\">\n                        <Link maintainScrollPosition={false} to={{\n                            pathname: `/posts/${post.slug}`,\n                            state: {fromDashboard: false}\n                        }}>{post.title}</Link>\n                        {post.draft === true ?\n                        <small className=\"draft\"> Draft</small>:\"\"}</h1>\n                    <h4>\n                        <small\n                            class=\"publish_date\"> Published: <Moment\n                            fromNow\n                            ago>{post.timestamp}</Moment> ago\n                        </small>\n                    </h4>\n                    {/*<h4>*/}\n                    {/*    Author: {post.author.username}*/}\n                    {/*</h4>*/}\n                    <h4>\n                        Read time: {post.read_time} min:\n                    </h4>\n                    <hr/>\n                    <p className={showContent}>\n                        <ReactMarkdown\n                            source={post.content.slice(0, 200).trim().concat('...')}/><Link\n                        maintainScrollPosition={false} to={{\n                        pathname: `/posts/${post.slug}`,\n                        state: {fromDashboard: false}\n                    }}>\n                        <button className={`btn btn-primary`}>Read\n                            More\n                        </button>\n                    </Link>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostInline\n","import React, {Component} from 'react';\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Link} from 'react-router-dom'\nimport PostInline from './PostInline'\nimport Button from 'react-bootstrap/Button';\n\nclass Posts extends Component {\n\n    constructor(props) {\n        super(props);\n        this.togglePostListClass = this.togglePostListClass.bind(this);\n        this.handleNewPost = this.handleNewPost.bind(this);\n        this.loadMorePosts = this.loadMorePosts.bind(this);\n        this.state = {\n            posts: [],\n            postsPublic: [],\n            postsListClass: \"card\",\n            next: null,\n            previous: null,\n            author: false,\n            draft: null,\n            count: 0\n        }\n    }\n\n    loadMorePosts() {\n        const {next} = this.state;\n        if (next !== null || next !== undefined) {\n            this.loadPosts(next)\n        }\n\n    }\n\n    loadPosts(nextEndpoint) {\n        let endpoint = '/api/posts/';\n        if (nextEndpoint !== undefined) {\n            endpoint = nextEndpoint\n        }\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                return response.json()\n            }).then(function (responseData) {\n                // let currentPosts = thisComp.state.posts;\n                // let allPosts = currentPosts.concat(responseData.results);\n                let postsPublicList = responseData.results.filter(post => post.draft === false);\n\n                thisComp.setState({\n                    posts: thisComp.state.posts.concat(responseData.results),\n                    postsPublic: thisComp.state.postsPublic.concat(postsPublicList),\n                    next: responseData.next,\n                    previous: responseData.previous,\n                    staff: responseData.staff,\n                    draft: responseData.draft,\n                    count: responseData.count\n                })\n            }\n        ).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n    handlePosts(responseData) {\n        let posts = responseData.filter(post => post.draft === false);\n        this.setState({\n            postsPublic: posts\n        })\n    }\n\n    handleNewPost(postItemData) {\n        // console.log(postItemData)\n        let currentPosts = this.state.posts;\n        currentPosts.unshift(postItemData); // unshift\n        this.setState({\n            posts: currentPosts\n        })\n    }\n\n\n    togglePostListClass(event) {\n        event.preventDefault();\n        let currentListClass = this.state.postsListClass;\n        if (currentListClass === \"\") {\n            this.setState({\n                postsListClass: \"card\",\n            })\n        } else {\n            this.setState({\n                postsListClass: \"\",\n            })\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            posts: [],\n            postsListClass: \"card\",\n            next: null,\n            previous: null,\n            // author: true,\n            count: 0\n        });\n        this.loadPosts()\n    }\n\n    render() {\n        const {posts} = this.state;\n        const {postsPublic} = this.state;\n        const {postsListClass} = this.state;\n        const {staff} = this.state;\n        console.log(staff);\n        const {next} = this.state;\n        return (\n            <div className=\"container-fluid\">\n                {/*<h1>*/}\n                {/*    {staff === true ?*/}\n                {/*        <Link className='mr-2'*/}\n                {/*              maintainScrollPosition={false}*/}\n                {/*              to={{*/}\n                {/*                  pathname: `/posts/create/`,*/}\n                {/*                  state: {fromDashboard: false}*/}\n                {/*              }}>Create Post</Link> : \"\"} <b/>*/}\n\n                {/*<Button onClick={this.togglePostListClass}>List View</Button>*/}\n                {/*</h1>*/}\n                <br/>\n                {staff === true ?\n                    <div className=\"card-columns\">\n                        {posts.length > 0 ? posts.map((postItem, index) => {\n                            return (\n                                <PostInline post={postItem}\n                                            elClass={postsListClass}/>\n                            )\n                        }) : <p>No Posts Found</p>\n                        }\n                    </div>\n                    :\n                    <div className=\"card-columns\">\n                        {posts.length > 0 ? postsPublic.map((postItem, index) => {\n                            return (\n                                <PostInline post={postItem}\n                                            elClass={postsListClass}/>\n                            )\n                        }) : <p>No Posts Found</p>\n                        }\n                    </div>}\n                <div className=\"d-flex flex-column text-center\">\n                    {next !== null ? <Button\n                        variant=\"outline-light\"\n                        onClick={this.loadMorePosts}>Load\n                        more</Button> : ''}\n                </div>\n                <br/>\n            </div>\n        );\n    }\n}\n\nexport default Posts;","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport moment from 'moment'\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleDraftChange = this.handleDraftChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n        this.postTitleRef = React.createRef();\n        this.postContentRef = React.createRef();\n        this.state = {\n            draft: false,\n            title: null,\n            content: null,\n            publish: null,\n            errors: {}\n        }\n    }\n\n    createPost(data) {\n        const endpoint = '/api/posts/';\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                console.log(responseData);\n                if (thisComp.props.newPostItemCreated) {\n                    thisComp.props.newPostItemCreated(responseData)\n                }\n                thisComp.clearForm()\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occured, please try again later.\")\n            })\n        }\n\n    }\n\n    updatePost(data) {\n        const {post} = this.props;\n        const endpoint = `/api/posts/${post.slug}/`;\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"PUT\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                // console.log(responseData)\n                if (thisComp.props.postItemUpdated) {\n                    thisComp.props.postItemUpdated(responseData)\n                }\n\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occured, please try again later.\")\n            })\n        }\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let data = this.state;\n\n        const {post} = this.props;\n        if (post !== undefined) {\n            this.updatePost(data)\n        } else {\n            this.createPost(data)\n        }\n\n    }\n\n    handleInputChange(event) {\n        event.preventDefault();\n        let key = event.target.name;\n        let value = event.target.value;\n        if (key === 'title') {\n            if (value.length > 120) {\n                alert(\"This title is too long\")\n            }\n        }\n        this.setState({\n            [key]: value\n        })\n    }\n\n    handleDraftChange(event) {\n        this.setState({\n            draft: !this.state.draft\n        })\n    }\n\n    clearForm(event) {\n        if (event) {\n            event.preventDefault()\n        }\n        this.postCreateForm.reset();\n        this.defaultState()\n    }\n\n\n    clearFormRefs() {\n        this.postTitleRef.current = '';\n        this.postContentRef.current = ''\n    }\n\n\n    defaultState() {\n        this.setState({\n            draft: false,\n            title: null,\n            content: null,\n            publish: moment(new Date()).format('YYYY-MM-DD'),\n        })\n    }\n\n    componentDidMount() {\n        const {post} = this.props;\n        if (post !== undefined) {\n            this.setState({\n                draft: post.draft,\n                title: post.title,\n                content: post.content,\n                publish: moment(post.publish).format('YYYY-MM-DD'),\n            })\n        } else {\n            this.defaultState()\n        }\n        // this.postTitleRef.current.focus()\n    }\n\n    render() {\n        const {publish} = this.state;\n        const {title} = this.state;\n        const {content} = this.state;\n        const cancelClass = this.props.post !== undefined ? \"d-none\" : \"\";\n        let thisComp = this;\n        return (\n            <form onSubmit={this.handleSubmit} ref={(el) => this.postCreateForm = el}>\n                <div className='form-group'>\n                    <label for='title'>Post title</label>\n                    <input\n                        type='text'\n                        id='title'\n                        name='title'\n                        value={title}\n                        className='form-control'\n                        placeholder='Blog post title'\n                        ref={this.postTitleRef}\n                        onChange={this.handleInputChange}\n                        required='required'/>\n                </div>\n                <div className='form-group'>\n                    <label for='content'>Content</label>\n                    <textarea\n                        id='content'\n                        ref={this.postContentRef}\n                        name='content'\n                        value={content}\n                        className='form-control'\n                        placeholder='Post content'\n                        onChange={this.handleInputChange}\n                        required='required'/>\n\n                </div>\n                <div className='form-group'>\n                    <label for='draft'>\n                        <input type='checkbox' checked={this.state.draft}\n                               id='draft' name='draft' className='mr-2'\n                               onChange={this.handleDraftChange}/>\n                        Draft </label>\n                    <button onClick={(event) => {\n                        event.preventDefault();\n                        this.handleDraftChange()\n                    }}>Toggle Draft\n                    </button>\n                </div>\n                <div className='form-group'>\n                    <label for='publish'>Publish Date</label>\n                    <input\n                        type='date'\n                        id='publish'\n                        name='publish'\n                        className='form-control'\n                        onChange={this.handleInputChange}\n                        value={publish}\n                        required='required'/>\n                </div>\n                <button type='submit' className='btn btn-primary'>Save</button>\n                <button className={`btn btn-secondary`}\n                        onClick={this.clearForm}>Clear\n                </button>\n            </form>\n        )\n    }\n\n}\n\nexport default PostForm","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Link} from 'react-router-dom'\nimport twitLogo from './twitter.png'\nimport linkdLogo from './linkin.png'\nimport redditLogo from './reddit.svg'\nimport fbookLogo from './facebook.svg'\nimport PostForm from './PostForm'\nimport Moment from \"react-moment\";\nimport ReactMarkdown from \"react-markdown\";\nimport {\n    FacebookIcon,\n    LinkedinIcon,\n    TwitterIcon,\n    RedditIcon,\n    InstapaperIcon,\n    EmailIcon,\n    FacebookShareButton,\n    LinkedinShareButton,\n    TwitterShareButton,\n    RedditShareButton,\n    InstapaperShareButton,\n    EmailShareButton\n} from 'react-share';\n\nclass PostDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.handlePostItemUpdated = this.handlePostItemUpdated.bind(this);\n        this.state = {\n            slug: null,\n            post: null,\n            doneLoading: false,\n        }\n    }\n\n    handlePostItemUpdated(postItemData) {\n        this.setState({\n            post: postItemData\n        })\n    }\n\n    loadPost(slug) {\n        const endpoint = `/api/posts/${slug}/`;\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                if (response.status === 404) {\n                    console.log('Page not found')\n                }\n                return response.json()\n            }).then(function (responseData) {\n            if (responseData.detail) {\n                thisComp.setState({\n                    doneLoading: true,\n                    post: null\n                })\n            } else {\n                thisComp.setState({\n                    doneLoading: true,\n                    post: responseData\n                })\n            }\n        }).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            slug: null,\n            post: null\n        });\n        if (this.props.match) {\n            const {slug} = this.props.match.params;\n            this.setState({\n                slug: slug,\n                doneLoading: false\n            });\n            this.loadPost(slug)\n        }\n    }\n\n    buildUrl() {\n        const {post} = this.state;\n        return (\n            `https://vvayne.io/posts/${post.slug}`)\n    }\n\n    render() {\n        const {doneLoading} = this.state;\n        const {post} = this.state;\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n        return (\n            <p>{(doneLoading === true) ? <div class=\"Main\">\n                {post === null ? \"Not Found\" :\n                    <div className=\"container-fluid\">\n                        <div className='row'>\n                            <div className='col-md-10'>\n                                <h1 id='alt'>{post.title}</h1>\n                                <h4 id='alt'>By {post.author.username}</h4>\n                                <hr style={hrStyle}/>\n                                <h4>\n                                    <small\n                                        className=\"publish_date\"\n                                        id='alt'> Published: <Moment\n                                        fromNow\n                                        ago>{post.timestamp}</Moment> ago&nbsp;\n                                    </small>\n                                </h4>\n                                <hr style={hrStyle}/>\n                                <img src={post.unsplash_url}\n                                     class=\"rounded img-fluid\"\n                                     alt=\"sigil\"/>\n                                <hr style={hrStyle}/>\n                                 <small id='shareIconsContainer'>\n                                    <EmailShareButton url={this.buildUrl()}>\n                                        <EmailIcon size={32} round={true}/>\n                                    </EmailShareButton>\n                                </small>\n                                <small id='shareIconsContainer'>\n                                    <FacebookShareButton url={this.buildUrl()}>\n                                        <FacebookIcon size={32} round={true}/>\n                                    </FacebookShareButton>\n                                </small>\n                                <small id='shareIconsContainer'>\n                                    <TwitterShareButton url={this.buildUrl()}>\n                                        <TwitterIcon size={32} round={true}/>\n                                    </TwitterShareButton>\n                                </small>\n                                <small id='shareIconsContainer'>\n                                    <LinkedinShareButton url={this.buildUrl()}>\n                                        <LinkedinIcon size={32} round={true}/>\n                                    </LinkedinShareButton>\n                                </small>\n                                <small id='shareIconsContainer'>\n                                    <RedditShareButton url={this.buildUrl()}>\n                                        <RedditIcon size={32} round={true}/>\n                                    </RedditShareButton>\n                                </small>\n                                <small id='shareIconsContainer'>\n                                    <InstapaperShareButton url={this.buildUrl()}>\n                                        <InstapaperIcon size={32} round={true}/>\n                                    </InstapaperShareButton>\n                                </small>\n                                <p id=\"alt\">\n                                    <ReactMarkdown\n                                        source={post.content}/>\n                                </p>\n\n                            </div>\n\n                            <div className='col-md-2'>\n                                <br/>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div> : \"Loading...\"}</p>\n        )\n    }\n}\n\nexport default PostDetail","import React, {Component} from 'react'\n\nimport PostForm from './PostForm'\n\nclass PostCreate extends Component {\n  render(){\n    return (\n      <div>\n      <h1>Create Post</h1>\n        <PostForm />\n      </div>\n    )\n  }\n\n}\n\nexport default PostCreate\n\n// left for reference\n\n\n\n\n// import React, {Component} from 'react'\n// import 'whatwg-fetch'\n// import cookie from 'react-cookies'\n// import moment from 'moment'\n\n// class PostCreate extends Component {\n//     constructor(props){\n//         super(props)\n//         this.handleSubmit = this.handleSubmit.bind(this)\n//         this.handleInputChange = this.handleInputChange.bind(this)\n//         this.handleDraftChange = this.handleDraftChange.bind(this)\n//         this.clearForm = this.clearForm.bind(this)\n//         this.postTitleRef = React.createRef()\n//         this.postContentRef = React.createRef()\n//         this.state = {\n//             draft: false,\n//             title: null,\n//             content: null,\n//             publish: null,\n//             errors: {}\n//         }\n//     }\n//     createPost(data){\n//       const endpoint = '/api/posts/' \n//       const csrfToken = cookie.load('csrftoken')\n//       let thisComp = this\n//       if (csrfToken !== undefined) {\n//           let lookupOptions = {\n//               method: \"POST\",\n//               headers: {\n//                   'Content-Type': 'application/json',\n//                   'X-CSRFToken': csrfToken\n//               },\n//               body: JSON.stringify(data),\n//               credentials: 'include'\n//           }\n\n//           fetch(endpoint, lookupOptions)\n//           .then(function(response){\n//               return response.json()\n//           }).then(function(responseData){\n//               console.log(responseData)\n//               if (thisComp.props.newPostItemCreated){\n//                   thisComp.props.newPostItemCreated(responseData)\n//               }\n//               thisComp.clearForm()\n//           }).catch(function(error){\n//               console.log(\"error\", error)\n//               alert(\"An error occured, please try again later.\")\n//           })\n//       } \n      \n//   }\n\n//     handleSubmit(event){\n//         event.preventDefault()\n//         let data = this.state\n//         this.createPost(data)\n//     }\n\n//     handleInputChange(event){\n//         event.preventDefault()\n//         let key = event.target.name\n//         let value = event.target.value\n//         if (key === 'title'){\n//             if (value.length > 120){\n//                 alert(\"This title is too long\")\n//             }\n//         }\n//         this.setState({\n//             [key]: value\n//         })\n//     }\n\n//     handleDraftChange(event){\n//       this.setState({\n//         draft: !this.state.draft\n//       })\n//     }\n\n//     clearForm(event){\n//       if (event){\n//         event.preventDefault()\n//       }\n//       this.postCreateForm.reset()\n//     }\n\n\n//     clearFormRefs(){\n//       this.postTitleRef.current=''\n//       this.postContentRef.current=''\n//     }\n\n\n//     componentDidMount(){\n//         this.setState({\n//             draft: false,\n//             title: null,\n//             content: null,\n//             publish: moment(new Date()).format('YYYY-MM-DD'),\n//         })\n//         this.postTitleRef.current.focus()\n//     }\n\n//     render(){\n//         const {publish} = this.state\n//         let thisComp = this\n//         return (\n//             <form onSubmit={this.handleSubmit} ref={(el) => this.postCreateForm = el}>\n//                 <div className='form-group'>\n//                     <label for='title'>Post title</label>\n//                     <input \n//                       type='text' \n//                       id='title' \n//                       name='title' \n//                       className='form-control'\n//                       placeholder='Blog post title' \n//                       ref = {this.postTitleRef}\n//                       onChange={this.handleInputChange} \n//                       required='required'/>\n//                 </div>\n//                  <div className='form-group'>\n//                     <label for='content'>Content</label>\n//                     <textarea id='content' ref = {this.postContentRef} name='content' className='form-control' placeholder='Post content' onChange={this.handleInputChange} required='required'/>\n                   \n//                 </div>\n//                 <div className='form-group'>\n//                     <label for='draft'>\n//                     <input type='checkbox' checked={this.state.draft} id='draft' name='draft' className='mr-2' onChange={this.handleDraftChange}/>\n//                      Draft </label>\n//                      <button onClick={(event)=>{event.preventDefault();this.handleDraftChange()}}>Toggle Draft</button>\n//                 </div>\n//                 <div className='form-group'>\n//                     <label for='publish'>Publish Date</label>\n//                     <input \n//                     type='date' \n//                     id='publish' \n//                     name='publish' \n//                     className='form-control' \n//                     onChange={this.handleInputChange}\n//                      value={publish}\n//                      required='required'/>\n//                 </div>\n//                 <button type='submit' className='btn btn-primary'>Save</button>\n//                 <button className='btn btn-secondary' onClick={this.clearForm}>Cancel</button>\n//             </form>\n//         )\n//     }\n\n// }\n\n// export default PostCreate","import React, {Component} from 'react';\n\nclass ScrapeInline extends Component {\n\n    render() {\n        const {reviews} = this.props;\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n        return (\n            <div className=\"col-lg-12\">\n                <td className=\"dash\"><b>{reviews.author}</b> |</td>\n                <td className=\"dash\"><b>{reviews.date}</b> |</td>\n                <td className=\"dash\"><b>{reviews.rating}</b></td>\n                <p className=\"dash\">{reviews.review}</p>\n                <hr style={hrStyle}/>\n            </div>\n        );\n    }\n}\n\nexport default ScrapeInline","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Link} from 'react-router-dom'\nimport ScrapeInline from \"../scrape/ScrapeInline\";\nimport {Redirect} from \"react-router-dom\";\nimport csvDownload from 'json-to-csv-export'\nimport Button from 'react-bootstrap/Button';\n\nclass ScrapeDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.handlePostItemUpdated = this.handlePostItemUpdated.bind(this);\n        this.state = {\n            slug: null,\n            scrape: null,\n            doneLoading: false,\n        }\n    }\n\n    handlePostItemUpdated(scrapeItemData) {\n        this.setState({\n            scrape: scrapeItemData\n        })\n    }\n\n    loadReviews(slug) {\n        const endpoint = `/api/scrape/${slug}/`;\n        let thisComp = this;\n        let lookupOptions = {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const csrfToken = cookie.load('csrftoken');\n        if (csrfToken !== undefined) {\n            lookupOptions['credentials'] = 'include';\n            lookupOptions['headers']['X-CSRFToken'] = csrfToken\n        }\n\n        fetch(endpoint, lookupOptions)\n            .then(function (response) {\n                if (response.status === 404) {\n                    console.log('Page not found')\n                }\n                return response.json()\n            }).then(function (responseData) {\n            if (responseData.detail) {\n                thisComp.setState({\n                    doneLoading: true,\n                    scrape: null\n                })\n            } else {\n                thisComp.setState({\n                    doneLoading: true,\n                    scrape: responseData\n                })\n            }\n        }).catch(function (error) {\n            console.log(\"error\", error)\n        })\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            slug: null\n        });\n        if (this.props.match) {\n            const {slug} = this.props.match.params;\n            this.setState({\n                slug: slug,\n                doneLoading: false\n            });\n            this.loadReviews(slug)\n        }\n    }\n\n    buildUrl() {\n        const {scrape} = this.state;\n        return (\n            `https://vvayne.io/scrape/results/${scrape.slug}`)\n    }\n\n    buildFileName() {\n        const {scrape} = this.state;\n        return (\n            `${scrape.business_name}.csv`\n        )\n    }\n\n\n    static routeChange() {\n        let path = `/scrape/create`;\n        return (\n            <Redirect to={path}/>\n        )\n    }\n\n    render() {\n        const {doneLoading} = this.state;\n        const {scrape} = this.state;\n        console.log(scrape);\n        const hrStyle = {\n            display: 'block',\n            height: '1px',\n            border: 0,\n            borderTop: '1px solid #ccc',\n            margin: '1em 0',\n            padding: '0',\n            color: 'white'\n        };\n        return (\n            <p>{(doneLoading === true) ? <div class=\"Main\">\n                {scrape === null ? \"No Reviews Found...In order to use this\\n\" +\n                    \"scraper you must be a registered user and\\n\" +\n                    \"logged in. If you are logged in and receiving\\n\" +\n                    \"this error, please confirm that the business\\n\" +\n                    \"you are attempting to scrape has reviews.\" :\n                    <div className=\"container-fluid\">\n                        <Link maintainScrollPosition={false} to={{\n                            pathname: `/scrape`,\n                            state: {fromDashboard: false}\n\n                        }}>\n                            <button className={`btn btn-primary`}>New\n                                Scrape\n                            </button>\n                        </Link>\n                        <br/>\n                        <br/>\n                        <h1>{scrape.business_name}</h1>\n                        <Button variant=\"secondary\"\n                                onClick={() => csvDownload(scrape.reviews, this.buildFileName())}>\n                            Download Data\n                        </Button>\n                        <hr style={hrStyle}/>\n                        <div className=\"row\">\n                            {scrape.reviews.length > 0 ? scrape.reviews.map((scrapeItem, index) => {\n                                return (\n                                    <ScrapeInline reviews={scrapeItem}\n\n                                    />\n                                )\n                            }) : <p>No Reviews Found</p>}\n                            {/*{next !== null ?*/}\n                            {/*    <Button onClick={this.loadMorePosts}>Load*/}\n                            {/*        more</Button> : ''}*/}\n                        </div>\n                    </div>\n                }\n            </div> : <div class=\"spinner-border\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span></div>}</p>\n        )\n    }\n}\n\nexport default ScrapeDetail","import React, {Component} from 'react'\nimport 'whatwg-fetch'\nimport cookie from 'react-cookies'\nimport {Redirect} from \"react-router-dom\";\nimport Loader from 'react-loader-spinner';\n\nclass ScrapeForm extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n        this.scrapeLinkRef = React.createRef();\n        this.state = {\n            link: null,\n            redirect: false,\n            slug: null,\n            redirectLink: null,\n            scraping: null,\n            errors: {}\n        }\n    }\n\n    createScrape(data) {\n        const endpoint = '/api/scrape/';\n        const csrfToken = cookie.load('csrftoken');\n        let thisComp = this;\n        if (csrfToken !== undefined) {\n            let lookupOptions = {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            };\n\n            fetch(endpoint, lookupOptions)\n                .then(function (response) {\n                    return response.json()\n                }).then(function (responseData) {\n                    thisComp.setState({redirectLink: `/scrape/results/${responseData.slug}`, scraping: null});\n                    console.log(`scrape/results/${responseData.slug}`);\n                thisComp.clearForm()\n            }).catch(function (error) {\n                console.log(\"error\", error);\n                alert(\"An error occurred, please try again later.\")\n            }).then(() => this.setState({ redirect: true }));\n        }\n\n    }\n\n    // buildRedirect() {\n    //     const {slug} = this.state;\n    //     const {link} = `scrape/results/${slug}`;\n    //     console.log(link);\n    //     return (\n    //         link.toString)\n    // }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let data = this.state;\n\n        const {scrape} = this.props;\n        if (scrape === undefined) {\n        this.setState({scraping: true});\n        this.createScrape(data)\n        }\n        else {\n            this.clearFormRefs();\n        }\n\n    }\n\n    handleInputChange(event) {\n        event.preventDefault();\n        let key = event.target.name;\n        let value = event.target.value;\n        if (key === 'link') {\n            if (value.length > 120) {\n                alert(\"This link is too long\")\n            }\n        }\n        this.setState({\n            [key]: value\n        });\n    }\n\n    clearForm(event) {\n        if (event) {\n            event.preventDefault()\n        }\n        this.scrapeCreateForm.reset();\n        this.defaultState();\n    }\n\n\n    clearFormRefs() {\n        this.scrapeLinkRef.current = '';\n    }\n\n\n    defaultState() {\n        this.setState({\n            link: null,\n        })\n    }\n\n    componentDidMount() {\n        const {scrape} = this.props;\n        if (scrape !== undefined) {\n            this.setState({\n                link: scrape.link,\n            })\n        } else {\n            this.defaultState()\n        }\n        // this.postTitleRef.current.focus()\n    }\n\n    render() {\n        const {link} = this.state;\n        const { redirect } = this.state;\n        const { redirectLink } = this.state;\n        const { scraping } = this.state;\n        if (scraping) {\n            return <div id=\"react-loader\"><Loader type=\"Puff\" color=\"#00BFFF\" height=\"200\" width=\"200\" /> ...scraping</div>\n        }\n        if (redirect) {\n        return <Redirect to={redirectLink}/>;\n        }\n        return (\n            <form onSubmit={this.handleSubmit} ref={(el) => this.scrapeCreateForm = el}>\n                <div className='form-group'>\n                    <input\n                        type='text'\n                        id='link'\n                        name='link'\n                        value={link}\n                        className='form-control'\n                        placeholder='Yelp Link'\n                        ref={this.scrapeLinkRef}\n                        onChange={this.handleInputChange}\n                        required='required'/>\n                </div>\n                <button type='submit' className='btn btn-primary'>Scrape</button>\n                 &nbsp;\n                <button className={`btn btn-secondary`}\n                        onClick={this.clearForm}>Clear</button>\n            </form>\n        )\n    }\n\n}\n\nexport default ScrapeForm","import React, {Component} from 'react'\n\nimport ScrapeForm from './ScrapeForm'\n\nclass ScrapeCreate extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron jumbotron-fluid\">\n                    <div className=\"container\">\n                        <h1 className=\"display-4\">Yelp Scraper Demo</h1>\n                        <p className=\"lead\">This is a demo of a simple scraper\n                            I built to fetch yelp reviews.</p>\n                        <p className=\"lead\" id=\"enhance\">Instructions:</p>\n                            <ul className=\"lead\" id=\"enhance\">1. Find the business’s yelp page</ul>\n\n                            <ul className=\"lead\" id=\"enhance\">2. Copy the url and paste it into the text\n                                box below</ul>\n                         <p className=\"lead\">\n                            <i>Note: This demo currently only scrapes two\n                                pages, to minimize database storage. </i>\n                         </p>\n                         <p className=\"lead\">\n                            A fully developed standalone web app is currently\n                            under developed and will allow for the retrieval\n                            and temporary storage of all reviews. </p>\n                    </div>\n                </div>\n                <h1>Scrape Yelp</h1>\n                <ScrapeForm/>\n            </div>\n        )\n    }\n\n}\n\nexport default ScrapeCreate","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch} from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Posts from './posts/Posts';\nimport PostDetail from './posts/PostDetail';\nimport PostCreate from './posts/PostCreate'\n\nimport ScrapeDetail from './scrape/ScrapeDetail';\nimport ScrapeCreate from './scrape/ScrapeCreate'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n          <Switch>\n            <Route exact path='/posts/create' component={PostCreate}/>\n            <Route exact path='/posts/' component={Posts}/>\n            <Route exact path='/posts/:slug' component={PostDetail}/>\n            <Route exact path='/scrape/' component={ScrapeCreate}/>\n            <Route exact path='/scrape/results/:slug' component={ScrapeDetail}/>\n            {/*<Route component={Posts}/>*/}\n          </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}